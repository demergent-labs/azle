[workspace]
resolver = "2"
members = [
    "dev-tools",
    "src/experimental/build/commands/build/wasm_binary/rust/experimental_canister_template",
    "src/experimental/build/commands/build/wasm_binary/rust/open_value_sharing",
    "src/stable/build/commands/build/wasm_binary/rust/stable_canister_template",
    "src/stable/build/commands/generate/rust/candid_to_ts_js",
]

[workspace.dependencies]
anyhow = "1.0.98"
candid = "0.10.14"
candid_parser = "0.1.4"
ic-cdk = "0.18.5"
ic-cdk-timers = "0.12.2"
ic-stable-structures = "0.6.9"
ic-wasi-polyfill = "0.8.2"
peak_alloc = "0.3.0"
rand = "0.9.1"
scopeguard = "1.2.0"
serde = "1.0.219"
serde_json = "1.0.140"
slotmap = "1.0.7"

[profile.release]
lto = true
codegen-units = 1

# We are hardcoding the "abort" strategy for now, even though it is currently the default
# If Rust ever changes the default to "unwind", we want to keep "abort"
# "abort" is the simplest choice, and has been the default choice on ICP for a long time
# "unwind" would probably lead to larger binaries, more cycle execution, and generally more complexity
# A potential change from "abort" to "unwind" should only ever be done after a thorough investigation
# As of rustc 1.85.0, apparently unwinding doesn't even work
# You can see that the default panic strategy for the wasm32-wasip1 target is currently set to "abort"
# wasm base settings: https://github.com/rust-lang/rust/blob/1.85.0/compiler/rustc_target/src/spec/base/wasm.rs#L77
# wasm32-wasip1 settings use the wasm base settings: https://github.com/rust-lang/rust/blob/1.85.0/compiler/rustc_target/src/spec/targets/wasm32_wasip1.rs#L16
panic = "abort"
