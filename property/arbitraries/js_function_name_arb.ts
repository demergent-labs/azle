import fc from 'fast-check';
const rustKeywords = [
    'as',
    'break',
    'const',
    'continue',
    'crate',
    'else',
    'enum',
    'Err',
    'extern',
    'false',
    'fn',
    'for',
    'if',
    'impl',
    'in',
    'let',
    'loop',
    'match',
    'mod',
    'move',
    'mut',
    'Ok',
    'pub',
    'ref',
    'return',
    'self',
    'Self',
    'static',
    'struct',
    'super',
    'trait',
    'true',
    'type',
    'unsafe',
    'use',
    'where',
    'while',
    'async',
    'await',
    'dyn',
    'abstract',
    'become',
    'box',
    'do',
    'final',
    'macro',
    'override',
    'priv',
    'virtual',
    'yield'
];

const azleKeywords = [
    'blob',
    'bool',
    'float32',
    'float64',
    'Func',
    'int',
    'int8',
    'int16',
    'int32',
    'int64',
    'nat',
    'nat8',
    'nat16',
    'nat32',
    'nat64',
    'Null',
    'Opt',
    'Principal',
    'Record',
    'Recursive',
    'Service',
    'Tuple',
    'Variant',
    'Vec'
];

const jsKeywords = [
    'await',
    'break',
    'case',
    'catch',
    'class',
    'const',
    'continue',
    'debugger',
    'default',
    'delete',
    'do',
    'else',
    'enum',
    'export',
    'extends',
    'false',
    'finally',
    'for',
    'function',
    'if',
    'implements',
    'import',
    'in',
    'instanceof',
    'interface',
    'let',
    'new',
    'null',
    'package',
    'private',
    'protected',
    'public',
    'return',
    'super',
    'switch',
    'static',
    'this',
    'throw',
    'true',
    'try',
    'typeof',
    'var',
    'void',
    'while',
    'with',
    'yield',
    // Additional words with special meaning
    'NaN',
    'Infinity',
    'undefined',
    'arguments',
    'eval'
];

// This breaks rust but it doesn't seem to be a rust keyword
const otherKeywords = ['drop'];

export const JsFunctionNameArb = fc
    .stringMatching(/^(_[a-zA-Z0-9]+|[a-zA-Z][a-zA-Z0-9]*)$/)
    .filter((sample) => !rustKeywords.includes(sample))
    .filter((sample) => !jsKeywords.includes(sample))
    .filter((sample) => !otherKeywords.includes(sample))
    .filter((sample) => !azleKeywords.includes(sample));
