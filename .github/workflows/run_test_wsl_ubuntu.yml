name: Run Test (WSL)

on:
    workflow_call:
        inputs:
            directories:
                required: true
                type: string
            exclude-dirs:
                required: false
                type: string
                default: ''
            link-azle:
                required: true
                type: boolean
            run-experimental:
                required: false
                type: boolean
                default: false
            fuzz:
                required: false
                type: boolean
                default: false
            call-delay:
                required: false
                type: string
                default: '.1'
            time-limit:
                required: false
                type: string
                default: '300'

jobs:
    get-test-infos:
        name: Get test infos
        runs-on: ubuntu-latest
        outputs:
            test-infos: ${{ steps.get-test-infos.outputs.test-infos }}
        steps:
            - uses: actions/checkout@v4

            - id: get-test-infos
              uses: ./.github/actions/get_test_infos
              with:
                  directories: ${{ inputs.directories }}
                  exclude-dirs: ${{ inputs.exclude-dirs }}

    run-test:
        name: '${{matrix.test.name}} | ${{matrix.test.displayPath}} | ${{matrix.azle_source}} | WSL'
        needs: get-test-infos
        runs-on: windows-latest

        strategy:
            fail-fast: false # We want to see which example tests succeed and which ones fail, we don't want one example test to cancel the rest
            matrix: # spins up one job per combination of test and code source (repo or npm).
                azle_source:
                    - ${{ inputs.link-azle == true && 'repo' || 'npm' }}
                test: ${{ fromJSON(needs.get-test-infos.outputs.test-infos) }}
        steps:
            - name: Setup WSL
              uses: Vampire/setup-wsl@v5
              with:
                  distribution: Ubuntu-24.04
                  additional-packages: |
                      curl
                      build-essential
                      git
                      jq
                  wsl-conf: |
                      [boot]
                      systemd=true
                  set-as-default: 'true'
                  wsl-shell-user: 'tester'

            - name: Clone repository in WSL
              run: |
                  # Clone the repository directly in WSL for proper Unix line endings
                  cd /home/tester
                  git clone --no-single-branch https://github.com/${{ github.repository }}.git azle
                  cd azle
                  # Fetch all remote branches and pull request refs to ensure we have the specific commit
                  git fetch --all
                  git fetch origin '+refs/pull/*/head:refs/remotes/origin/pr/*' || true
                  git fetch origin '+refs/pull/*/merge:refs/remotes/origin/merge/*' || true
                  git checkout ${{ github.sha }}
              shell: wsl-bash {0}

            - name: Copy .github directory for actions
              run: |
                  # Copy .github directory from WSL to Windows working directory
                  # Ensure the target directory exists first
                  mkdir -p "${{ github.workspace }}/.github"
                  cp -r /home/tester/azle/.github/* "${{ github.workspace }}/.github/"
              shell: wsl-bash {0}

            - uses: ./.github/actions/determine_workflow_context
              id: set-conditions

            - name: Setup and run tests
              shell: wsl-bash {0}
              run: |
                  AZLE_ROOT=/home/tester/azle
                  EXAMPLE_ROOT=/home/tester/azle/${{ matrix.test.path }}

                  retry_command() {
                      local function_name="${1}"
                      local max_attempts=5
                      local initial_delay=1
                      local max_delay=60

                      local attempt=1
                      local delay=$initial_delay

                      echo "=== Retry command setup for '$function_name' ==="
                      echo "Max attempts: $max_attempts, Initial delay: ${initial_delay}s, Max delay: ${max_delay}s"

                      # Try the function until it succeeds (matches the original retry_command action pattern)
                      until {
                          echo "Attempt $attempt/$max_attempts for '$function_name'"
                          $function_name
                      }; do
                          if [[ "$attempt" -ge "$max_attempts" ]]; then
                              echo "💥 '$function_name' failed after $attempt attempts"
                              return 1
                          fi

                          attempt=$(($attempt + 1))
                          echo "❌ '$function_name' failed, retrying in $delay seconds... (attempt $attempt/$max_attempts)"
                          sleep $delay

                          # Exponential backoff with configurable maximum
                          delay=$(( delay * 2 ))
                          if [[ "$delay" -gt "$max_delay" ]]; then
                              delay=$max_delay
                          fi
                      done

                      echo "✅ '$function_name' succeeded on attempt $attempt"
                      return 0
                  }

                  set_environment_variables() {
                      echo "=== Setting environment variables ==="
                      # Set workflow context variables inline
                      AZLE_IS_MAIN_BRANCH_PUSH_FROM_FEATURE_MERGE="${{ steps.set-conditions.outputs.is_main_branch_push_from_feature_merge || 'false' }}"
                      AZLE_IS_MAIN_BRANCH_PUSH_FROM_RELEASE_MERGE="${{ steps.set-conditions.outputs.is_main_branch_push_from_release_merge || 'false' }}"
                      AZLE_IS_RELEASE_BRANCH_PR="${{ steps.set-conditions.outputs.is_release_branch_pr || 'false' }}"
                      AZLE_IS_FEATURE_BRANCH_PR="${{ steps.set-conditions.outputs.is_feature_branch_pr || 'false' }}"
                      AZLE_IS_FEATURE_BRANCH_DRAFT_PR="${{ steps.set-conditions.outputs.is_feature_branch_draft_pr || 'false' }}"
                  }

                  print_environment_variables() {
                      echo "=== Printing environment variables ==="
                      echo "AZLE_IS_MAIN_BRANCH_PUSH_FROM_FEATURE_MERGE: $AZLE_IS_MAIN_BRANCH_PUSH_FROM_FEATURE_MERGE"
                      echo "AZLE_IS_MAIN_BRANCH_PUSH_FROM_RELEASE_MERGE: $AZLE_IS_MAIN_BRANCH_PUSH_FROM_RELEASE_MERGE"
                      echo "AZLE_IS_RELEASE_BRANCH_PR: $AZLE_IS_RELEASE_BRANCH_PR"
                      echo "AZLE_IS_FEATURE_BRANCH_PR: $AZLE_IS_FEATURE_BRANCH_PR"
                      echo "AZLE_IS_FEATURE_BRANCH_DRAFT_PR: $AZLE_IS_FEATURE_BRANCH_DRAFT_PR"
                  }

                  report_test_path() {
                      echo "=== Reporting test path ==="
                      # Just in case the path isn't obvious from the name, this will remove ambiguity
                      echo ${{matrix.test.path}}
                  }

                  setup_nodejs() {
                      echo "=== Setting up Node.js ==="

                      # Get Node version from package.json
                      NODE_VERSION=$(jq -r '.azle.globalDependencies.node // error("node version not found")' "package.json")
                      echo "Installing Node.js version $NODE_VERSION using nvm..."

                      # Install nvm
                      curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.1/install.sh | bash

                      # Source nvm
                      export NVM_DIR="$HOME/.nvm"
                      source "$NVM_DIR/nvm.sh"

                      # Install and use the specific Node version
                      nvm install $NODE_VERSION
                      nvm use $NODE_VERSION
                      nvm alias default $NODE_VERSION

                      # Verify installation
                      node --version
                      npm --version
                  }

                  install_dfx() {
                      echo "=== Installing dfx ==="

                      DFX_VERSION=$(jq -r '.azle.globalDependencies.dfx // error("dfx version not found")' "package.json")
                      echo "Installing dfx version $DFX_VERSION..."
                      DFXVM_INIT_YES=true DFX_VERSION=$DFX_VERSION sh -ci "$(curl --retry 3 -fsSL https://sdk.dfinity.org/install.sh)"
                      export PATH="$HOME/.local/share/dfx/bin:$PATH"
                      if ! command -v dfx &> /dev/null; then
                          echo "dfx installation verification failed" >&2
                          exit 1
                      fi
                      echo "dfx installation completed."
                  }

                  install_rust_cargo() {
                      echo "=== Installing Rust and Cargo ==="
                      echo "Installing Rust and Cargo..."
                      curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y

                      # Source the cargo environment
                      source "$HOME/.cargo/env"
                      export PATH="$HOME/.cargo/bin:$PATH"
                  }

                  install_npm_dependencies() {
                      echo "=== Installing npm dependencies ==="
                      npm install
                  }

                  npm_link() {
                      if [[ "${{ matrix.azle_source }}" == "repo" ]]; then
                          echo "=== Running npm link ==="
                          npm link
                      fi
                  }

                  run_npm_lint() {
                      echo "=== Running npm lint ==="
                      npm run lint
                  }

                  install_test_npm_dependencies() {
                      echo "=== Installing npm dependencies in test directory ==="
                      cd $EXAMPLE_ROOT
                      npm install
                      cd $AZLE_ROOT
                  }

                  install_experimental_dependencies() {
                      if [[ "${{ inputs.run-experimental }}" == "true" ]]; then
                          echo "=== Installing experimental dependencies ==="
                          cd $EXAMPLE_ROOT
                          npm install https://github.com/demergent-labs/azle-experimental-deps#882dcaa3aa0ccb66d81ee923c8279369a8424bfa
                          cd $AZLE_ROOT
                      fi
                  }

                  npm_link_azle() {
                      if [[ "${{ matrix.azle_source }}" == "repo" ]]; then
                          echo "=== Running npm link azle ==="
                          cd $EXAMPLE_ROOT
                          npm link azle
                          cd $AZLE_ROOT
                      fi
                  }

                  start_dfx() {
                      echo "=== Starting dfx ==="
                      if [[ "$AZLE_IS_RELEASE_BRANCH_PR" == "true" ]]; then
                          dfx start --clean --background
                      else
                          dfx start --clean --background --artificial-delay 0
                      fi
                  }

                  configure_test_settings() {
                      echo "=== Configuring test settings ==="

                      RECORD_ACTIONS='true'
                      RUNS=1

                      if [[ "$AZLE_IS_MAIN_BRANCH_PUSH_FROM_FEATURE_MERGE" == "true" ]]; then
                          RUNS=5
                      fi

                      if [[ "$AZLE_IS_MAIN_BRANCH_PUSH_FROM_RELEASE_MERGE" == "true" ]]; then
                          RUNS=100
                      fi

                      if [[ "$AZLE_IS_RELEASE_BRANCH_PR" == "true" ]]; then
                          RECORD_ACTIONS='false'
                          RUNS=10
                      fi

                      if [[ "$AZLE_IS_FEATURE_BRANCH_PR" == "true" ]]; then
                          RUNS=5
                      fi

                      if [[ "$AZLE_IS_FEATURE_BRANCH_DRAFT_PR" == "true" ]]; then
                          RUNS=1
                      fi

                      echo "Running tests $RUNS times"

                      # Export these for use in run_tests function
                      export TEST_RUNS=$RUNS
                      export TEST_RECORD_ACTIONS=$RECORD_ACTIONS
                  }

                  run_tests() {
                      echo "=== Running tests ==="
                      cd $EXAMPLE_ROOT

                      # Set test configuration variables
                      export AZLE_EXPERIMENTAL="${{ inputs.run-experimental }}"
                      export AZLE_FUZZ="${{ inputs.fuzz }}"
                      export AZLE_FUZZ_CALL_DELAY="${{ inputs.call-delay }}"
                      export AZLE_FUZZ_TIME_LIMIT="${{ inputs.time-limit }}"
                      export AZLE_RECORD_ACTIONS="$TEST_RECORD_ACTIONS"
                      export AZLE_PROPTEST_NUM_RUNS="$TEST_RUNS"
                      export AZLE_PROPTEST_VERBOSE=true
                      export AZLE_VERBOSE=true
                      export AZLE_IDENTITY_STORAGE_MODE=plaintext
                      export GITHUB_ACTIONS=true
                      export AZLE_RUNNING_IN_WSL=true

                      npm test
                      cd $AZLE_ROOT
                  }

                  # Execute functions in order
                  cd $AZLE_ROOT
                  set_environment_variables
                  print_environment_variables
                  report_test_path
                  retry_command setup_nodejs
                  retry_command install_dfx
                  retry_command install_rust_cargo
                  retry_command install_npm_dependencies
                  npm_link
                  run_npm_lint
                  retry_command install_test_npm_dependencies
                  retry_command install_experimental_dependencies
                  npm_link_azle
                  start_dfx
                  configure_test_settings
                  run_tests
