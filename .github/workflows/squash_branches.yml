name: Squash Branches
on:
    workflow_call:
        inputs:
            base-branch:
                required: true
                type: string
            branch-prefix:
                required: true
                type: string
            commit-message:
                required: true
                type: string

permissions:
    contents: write

jobs:
    squash:
        name: Squash Branches
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v4
              with:
                  ref: ${{ inputs.base-branch }}
                  token: ${{ secrets.GITHUB_TOKEN }}
                  fetch-depth: 0

            - name: Create GraphQL mutation file
              run: |
                  mkdir -p .github/api
                  cat > .github/api/createCommitOnBranch.gql << 'EOF'
                  mutation (
                      $githubRepository: String!,
                      $branchName: String!,
                      $expectedHeadOid: GitObjectID!
                      $commitMessage: String!
                      $files: [FileAddition!]!
                  ) {
                    createCommitOnBranch(
                      input: {
                      branch:
                      {
                          repositoryNameWithOwner: $githubRepository,
                          branchName: $branchName
                      },
                      message: {headline: $commitMessage},
                      fileChanges: {
                          additions: $files
                      }
                      expectedHeadOid: $expectedHeadOid
                      }
                    ){
                      commit {
                      url
                      }
                    }
                  }
                  EOF

            - name: Collect branches
              id: collect-branches
              run: |
                  # Get branches and convert to space-separated list
                  BRANCHES=$(git branch -r | grep "origin/${{ inputs.branch-prefix }}" | sed 's/origin\///' | xargs)
                  echo "branches=$BRANCHES" >> $GITHUB_OUTPUT

            - name: Display collected branches
              run: |
                  echo "Collected branches:"
                  for branch in ${{ steps.collect-branches.outputs.branches }}; do
                    echo "  - $branch"
                  done
                  echo "End of branch list"

            - name: Fetch branches
              run: |
                  echo "Fetching all branches..."
                  BRANCHES_TO_FETCH=""
                  for branch in ${{ steps.collect-branches.outputs.branches }}; do
                    BRANCHES_TO_FETCH+=" $branch:$branch"
                  done
                  git fetch origin $BRANCHES_TO_FETCH

            - name: Squash changes and commit via GraphQL
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              run: |
                  CURRENT_BRANCH=$(git branch --show-current)

                  # Perform squash merges
                  for branch in ${{ steps.collect-branches.outputs.branches }}; do
                    echo "Merging $branch into $CURRENT_BRANCH"
                    git merge --squash $branch
                  done

                  # Check if there are any changes to commit
                  if git diff --staged --quiet; then
                    echo "No changes to commit"
                    exit 0
                  fi

                  # Collect all changed files
                  CHANGED_FILES=($(git diff --staged --name-only))

                  if [ ${#CHANGED_FILES[@]} -eq 0 ]; then
                    echo "No files to commit"
                    exit 0
                  fi

                  echo "Committing ${#CHANGED_FILES[@]} files via GraphQL API..."

                  # Build files parameter for GraphQL
                  FILES=""
                  for file in "${CHANGED_FILES[@]}"; do
                    echo "Processing file: $file"
                    FILES="${FILES} -F files[][path]=$file -F files[][contents]=$(base64 -w0 $file)"
                  done

                  # Get current HEAD commit
                  EXPECTED_HEAD_OID=$(git rev-parse HEAD)

                  # Create single commit with all files via GraphQL API (automatically signed)
                  gh api graphql \
                    -F githubRepository="${GITHUB_REPOSITORY}" \
                    -F branchName="$CURRENT_BRANCH" \
                    -F expectedHeadOid="$EXPECTED_HEAD_OID" \
                    -F commitMessage="${{ inputs.commit-message }}" \
                    -F "query=@.github/api/createCommitOnBranch.gql" \
                    ${FILES}

            - name: Delete branches
              run: |
                  if [[ -n "$(echo ${{ steps.collect-branches.outputs.branches }} | tr -d '[:space:]')" ]]; then
                      echo "Starting branch deletion process..."
                      git push origin --delete ${{ steps.collect-branches.outputs.branches }}
                  else
                      echo "No branches to delete"
                  fi
