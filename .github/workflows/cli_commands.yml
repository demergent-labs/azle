name: CLI Commands

on:
    push:
        branches:
            - main
    pull_request:
        types:
            - opened
            - synchronize
            - ready_for_review
            - reopened

jobs:
    pack-azle:
        runs-on: ubuntu-latest
        steps:
            - name: Make Azle Directory
              id: make_azle_directory
              run: |
                  # Create a fresh test directory
                  AZLE_DIR="${{ github.workspace }}/azle"
                  mkdir -p "${AZLE_DIR}"
                  echo "azle_directory=${AZLE_DIR}" >> $GITHUB_OUTPUT

            - uses: actions/checkout@v4
              with:
                  path: azle

            - name: Verify that the directory is as we expect
              run: |
                  echo "Verifying the directory is as we expect"
                  ls -laR

            - uses: ./azle/.github/actions/setup_node
              with:
                  working-directory: azle

            - id: get-dfx-version
              run: |
                  PACKAGE_JSON_PATH="${{ github.workspace }}/azle/package.json"
                  DFX_VERSION=$(jq -r '.azle.globalDependencies.dfx // error("dfx version not found")' "$PACKAGE_JSON_PATH")
                  echo "dfx-version=${DFX_VERSION}" >> "$GITHUB_OUTPUT"
              shell: bash

            # Install dfx (Note: dfx must be installed before `npx azle` because the azle installation process requires dfx)
            - name: Install dfx
              uses: ./azle/.github/actions/retry_command
              with:
                  command: azle/src/stable/build/commands/dev/setup/install_dfx.sh "${{ steps.get-dfx-version.outputs.dfx-version }}"

            - run: echo "$HOME/.local/share/dfx/bin" >> $GITHUB_PATH
              shell: bash

            - uses: ./azle/.github/actions/retry_command
              with:
                  working-directory: azle
                  command: 'npm install'

            - name: Update version in package.json
              working-directory: azle
              run: |
                  # Create a unique version number using the GitHub run ID and run number
                  UNIQUE_VERSION="0.0.0-test-${GITHUB_RUN_ID}-${GITHUB_RUN_NUMBER}"
                  echo "Setting unique test version: ${UNIQUE_VERSION}"

                  # Update the version in package.json using npm version without creating a git tag
                  npm version "${UNIQUE_VERSION}" --no-git-tag-version

                  # Verify the updated version
                  UPDATED_VERSION=$(node -p "require('./package.json').version")
                  echo "Updated package.json version to: ${UPDATED_VERSION}"

                  # Save the version for later verification
                  echo "UNIQUE_VERSION=${UNIQUE_VERSION}" >> $GITHUB_ENV

            - name: Pack Azle source
              id: pack_azle
              working-directory: azle
              run: |
                  # Ensure the dist directory exists
                  mkdir -p "${{ github.workspace }}/dist"

                  # Pack into the dist directory and capture the original filename
                  ORIGINAL_PACKED_FILENAME=$(npm pack --pack-destination "${{ github.workspace }}/dist" | tail -n 1)
                  echo "Original packed filename: ${ORIGINAL_PACKED_FILENAME}"

                  # Define the final target path
                  TARGET_PACKED_FILE_PATH="${{ github.workspace }}/dist/azle.tgz"
                  echo "Target packed file path: ${TARGET_PACKED_FILE_PATH}"

                  # Construct the path to the originally created file
                  ORIGINAL_PACKED_FILE_PATH="${{ github.workspace }}/dist/${ORIGINAL_PACKED_FILENAME}"
                  echo "Original packed file path: ${ORIGINAL_PACKED_FILE_PATH}"

                  # Rename the packed file to the target name
                  mv "${ORIGINAL_PACKED_FILE_PATH}" "${TARGET_PACKED_FILE_PATH}"
                  echo "Renamed packed file to ${TARGET_PACKED_FILE_PATH}"

                  # Output the final absolute path for the installer step
                  echo "packed_file_absolute_path=${TARGET_PACKED_FILE_PATH}" >> $GITHUB_OUTPUT

            - name: Make Test Directory
              id: make_test_directory
              run: |
                  # Create a fresh test directory
                  TEST_DIR="${{ github.workspace }}/cli-test"
                  mkdir -p "${TEST_DIR}"
                  echo "test_directory=${TEST_DIR}" >> $GITHUB_OUTPUT

            - name: Install Test Azle
              working-directory: cli-test
              run: |
                  # Path to the packed azle.tgz file
                  AZLE_PACKAGE="${{ steps.pack_azle.outputs.packed_file_absolute_path }}"

                  # Temporarily install the package locally for testing
                  echo "Installing the packed azle package for testing"
                  npm install "${AZLE_PACKAGE}"

            - name: Verify that the directory is as we expect
              run: |
                  echo "Verifying the directory is as we expect"
                  ls -laR

            - name: Test Version CLI Command
              working-directory: cli-test
              run: |

                  echo "Testing version command"
                  DISPLAYED_VERSION=$(npx azle --version)
                  echo "Displayed version: ${DISPLAYED_VERSION}"

                  # Verify the version matches our unique test version
                  if [[ "${DISPLAYED_VERSION}" == *"${UNIQUE_VERSION}"* ]]; then
                    echo "✅ Verification successful: Running the correct packed version"
                  else
                    echo "❌ Verification failed: Version mismatch"
                    echo "Expected to find: ${UNIQUE_VERSION}"
                    echo "But got: ${DISPLAYED_VERSION}"
                    exit 1
                  fi

            - name: Test Dev Setup CLI Command
              working-directory: cli-test
              run: |

                  echo "Testing dev setup command"
                  npx azle dev setup

            - name: Generate Verification
              run: |
                  npx azle@latest generate ${{ github.workspace }}/azle/src/stable/lib/canisters/management/idl/ic.did > ${{ github.workspace }}/cli-test/expected_generate_output.ts

            - name: Test Generate CLI Command
              working-directory: cli-test
              run: |

                  echo "Testing generate command"
                  npx azle generate ${{ github.workspace }}/azle/src/stable/lib/canisters/management/idl/ic.did > generate_output.ts

            - name: Verify Generate Command
              working-directory: cli-test
              run: |
                  echo "Verifying generate command"
                  if ! diff expected_generate_output.ts generate_output.ts; then
                    echo "❌ Verification failed: Generated output does not match expected output"
                    exit 1
                  else
                    echo "✅ Verification successful: Generated output matches expected output"
                  fi

            # Test 'azle new' command with stable template
            - name: Test New Stable CLI Command
              working-directory: cli-test
              run: |
                  echo "Testing 'azle new' command with stable template"
                  npx azle new stable_new

            - name: Install Dependencies for Stable New Project
              working-directory: cli-test/stable_new
              run: |
                  echo "Installing dependencies for stable new project"
                  npm install

            - name: Test Stable New Project
              working-directory: cli-test/stable_new
              run: |
                  echo "Testing stable new project"
                  npm test

            - name: Check .azle Directory for Stable Project
              working-directory: cli-test/stable_new
              run: |
                  echo "Checking for .azle directory in stable project"
                  if [ -d ".azle" ]; then
                    echo "✅ .azle directory exists as expected"
                  else
                    echo "❌ .azle directory does not exist but should"
                    exit 1
                  fi

            - name: Clean Stable Project
              working-directory: cli-test/stable_new
              run: |
                  echo "Cleaning stable project"
                  npx azle clean

            - name: Verify .azle Directory Removed for Stable Project
              working-directory: cli-test/stable_new
              run: |
                  echo "Verifying .azle directory was removed from stable project"
                  if [ -d ".azle" ]; then
                    echo "❌ .azle directory still exists but should have been removed"
                    exit 1
                  else
                    echo "✅ .azle directory was successfully removed"
                  fi

            - name: Verify Azle Version in Stable Project
              working-directory: cli-test/stable_new
              run: |
                  echo "Verifying azle version in stable project"
                  DISPLAYED_VERSION=$(npx azle --version)
                  echo "Displayed version: ${DISPLAYED_VERSION}"

                  # Verify the version matches our unique test version
                  if [[ "${DISPLAYED_VERSION}" == *"${UNIQUE_VERSION}"* ]]; then
                    echo "✅ Verification successful: Running the correct packed version"
                  else
                    echo "❌ Verification failed: Version mismatch"
                    echo "Expected to find: ${UNIQUE_VERSION}"
                    echo "But got: ${DISPLAYED_VERSION}"
                    exit 1
                  fi

            # Test 'azle new' command with experimental template
            - name: Test New Experimental CLI Command
              working-directory: cli-test
              run: |
                  echo "Testing 'azle new' command with experimental template"
                  npx azle new experimental_new --experimental

            - name: Install Dependencies for Experimental New Project
              working-directory: cli-test/experimental_new
              run: |
                  echo "Installing dependencies for experimental new project"
                  npm install

            - name: Test Experimental New Project
              working-directory: cli-test/experimental_new
              run: |
                  echo "Testing experimental new project"
                  npm test

            - name: Check .azle Directory for Experimental Project
              working-directory: cli-test/experimental_new
              run: |
                  echo "Checking for .azle directory in experimental project"
                  if [ -d ".azle" ]; then
                    echo "✅ .azle directory exists as expected"
                  else
                    echo "❌ .azle directory does not exist but should"
                    exit 1
                  fi

            - name: Clean Experimental Project
              working-directory: cli-test/experimental_new
              run: |
                  echo "Cleaning experimental project"
                  npx azle clean

            - name: Verify .azle Directory Removed for Experimental Project
              working-directory: cli-test/experimental_new
              run: |
                  echo "Verifying .azle directory was removed from experimental project"
                  if [ -d ".azle" ]; then
                    echo "❌ .azle directory still exists but should have been removed"
                    exit 1
                  else
                    echo "✅ .azle directory was successfully removed"
                  fi

            - name: Verify Azle Version in Experimental Project
              working-directory: cli-test/experimental_new
              run: |
                  echo "Verifying azle version in experimental project"
                  DISPLAYED_VERSION=$(npx azle --version)
                  echo "Displayed version: ${DISPLAYED_VERSION}"

                  # Verify the version matches our unique test version
                  if [[ "${DISPLAYED_VERSION}" == *"${UNIQUE_VERSION}"* ]]; then
                    echo "✅ Verification successful: Running the correct packed version"
                  else
                    echo "❌ Verification failed: Version mismatch"
                    echo "Expected to find: ${UNIQUE_VERSION}"
                    echo "But got: ${DISPLAYED_VERSION}"
                    exit 1
                  fi

            # Test 'azle new' command with HTTP server template (experimental mode)
            - name: Test New HTTP CLI Command
              working-directory: cli-test
              run: |
                  echo "Testing 'azle new' command with HTTP server template"
                  npx azle new http_new --experimental --http-server

            - name: Install Dependencies for HTTP New Project
              working-directory: cli-test/http_new
              run: |
                  echo "Installing dependencies for HTTP new project"
                  npm install

            - name: Test HTTP New Project
              working-directory: cli-test/http_new
              run: |
                  echo "Testing HTTP new project"
                  npm test

            - name: Check .azle Directory for HTTP Project
              working-directory: cli-test/http_new
              run: |
                  echo "Checking for .azle directory in HTTP project"
                  if [ -d ".azle" ]; then
                    echo "✅ .azle directory exists as expected"
                  else
                    echo "❌ .azle directory does not exist but should"
                    exit 1
                  fi

            - name: Clean HTTP Project
              working-directory: cli-test/http_new
              run: |
                  echo "Cleaning HTTP project"
                  npx azle clean

            - name: Verify .azle Directory Removed for HTTP Project
              working-directory: cli-test/http_new
              run: |
                  echo "Verifying .azle directory was removed from HTTP project"
                  if [ -d ".azle" ]; then
                    echo "❌ .azle directory still exists but should have been removed"
                    exit 1
                  else
                    echo "✅ .azle directory was successfully removed"
                  fi

            - name: Verify Azle Version in HTTP Project
              working-directory: cli-test/http_new
              run: |
                  echo "Verifying azle version in HTTP project"
                  DISPLAYED_VERSION=$(npx azle --version)
                  echo "Displayed version: ${DISPLAYED_VERSION}"

                  # Verify the version matches our unique test version
                  if [[ "${DISPLAYED_VERSION}" == *"${UNIQUE_VERSION}"* ]]; then
                    echo "✅ Verification successful: Running the correct packed version"
                  else
                    echo "❌ Verification failed: Version mismatch"
                    echo "Expected to find: ${UNIQUE_VERSION}"
                    echo "But got: ${DISPLAYED_VERSION}"
                    exit 1
                  fi
