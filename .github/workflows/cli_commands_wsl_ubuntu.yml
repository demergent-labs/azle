name: Azle CLI Commands Testing (WSL-Ubuntu)

on:
    push:
        branches:
            - main
    pull_request:
        types:
            - opened
            - synchronize
            - ready_for_review
            - reopened

permissions:
    contents: read
    actions: read

jobs:
    setup-and-pack-wsl:
        runs-on: windows-latest
        outputs:
            test-version: ${{ steps.create_test_version.outputs.test_version }}
            packed-file-name: ${{ steps.pack_azle_source.outputs.packed_file_name }}
        steps:
            - name: Setup WSL-Ubuntu
              uses: Wandalen/wretry.action@v1.4.10
              with:
                  action: Vampire/setup-wsl@v5
                  with: |
                      distribution: Ubuntu-24.04
                      additional-packages: |
                          curl
                          build-essential
                          git
                          jq
                          clang
                      set-as-default: 'true'
                      wsl-shell-user: 'tester'
                  attempt_limit: 5
                  attempt_delay: 60000

            - name: Clone repository in WSL-Ubuntu
              run: |
                  # Add a comment
                  # Clone the repository directly in WSL-Ubuntu for proper Unix line endings
                  cd /home/tester
                  git clone --no-single-branch https://github.com/${{ github.repository }}.git azle
                  cd azle
                  # Fetch all remote branches and pull request refs to ensure we have the specific commit
                  git fetch --all
                  git fetch origin '+refs/pull/*/head:refs/remotes/origin/pr/*' || true
                  git fetch origin '+refs/pull/*/merge:refs/remotes/origin/merge/*' || true
                  git checkout ${{ github.sha }}
              shell: wsl-bash {0}

            - name: Setup and pack azle
              shell: wsl-bash {0}
              run: |
                  cd /home/tester/azle

                  # Source common functions
                  source ".github/scripts/common_functions.sh"

                  # Setup Node.js and dependencies
                  retry_command setup_nodejs
                  retry_command install_dfx
                  retry_command install_npm_dependencies

                  # Create test version
                  echo "=== Creating test version ==="
                  TEST_VERSION="0.0.0-cli-test-${GITHUB_RUN_ID}-${GITHUB_RUN_NUMBER}"
                  echo "Creating test version: ${TEST_VERSION}"
                  npm version "${TEST_VERSION}" --no-git-tag-version
                  echo "test_version=${TEST_VERSION}" >> $GITHUB_OUTPUT

                  # Pack azle source
                  echo "=== Packing azle source ==="
                  PACKED_FILE_NAME=$(npm pack | tail -n 1)
                  echo "Original packed filename: ${PACKED_FILE_NAME}"
                  echo "packed_file_name=${PACKED_FILE_NAME}" >> $GITHUB_OUTPUT

            - name: Create test version output
              id: create_test_version
              run: |
                  echo "test_version=${{ env.test_version }}" >> $GITHUB_OUTPUT
              shell: bash

            - name: Create packed file output
              id: pack_azle_source
              run: |
                  echo "packed_file_name=${{ env.packed_file_name }}" >> $GITHUB_OUTPUT
              shell: bash

            - name: Upload packed azle
              uses: actions/upload-artifact@v4
              with:
                  name: azle-packed-wsl-ubuntu
                  path: /home/tester/azle/${{ steps.pack_azle_source.outputs.packed_file_name }}
                  retention-days: 1

    test-version-command-wsl:
        needs: setup-and-pack-wsl
        runs-on: windows-latest
        steps:
            - name: Setup WSL-Ubuntu
              uses: Wandalen/wretry.action@v1.4.10
              with:
                  action: Vampire/setup-wsl@v5
                  with: |
                      distribution: Ubuntu-24.04
                      additional-packages: |
                          curl
                          build-essential
                          git
                          jq
                          clang
                      set-as-default: 'true'
                      wsl-shell-user: 'tester'
                  attempt_limit: 5
                  attempt_delay: 60000

            - name: Clone repository in WSL-Ubuntu
              run: |
                  cd /home/tester
                  git clone --no-single-branch https://github.com/${{ github.repository }}.git azle
                  cd azle
                  git fetch --all
                  git fetch origin '+refs/pull/*/head:refs/remotes/origin/pr/*' || true
                  git fetch origin '+refs/pull/*/merge:refs/remotes/origin/merge/*' || true
                  git checkout ${{ github.sha }}
              shell: wsl-bash {0}

            - name: Download packed azle
              uses: actions/download-artifact@v4
              with:
                  name: azle-packed-wsl-ubuntu
                  path: /home/tester/azle/

            - name: Setup and test version command
              shell: wsl-bash {0}
              run: |
                  cd /home/tester/azle

                  # Source common functions
                  source ".github/scripts/common_functions.sh"

                  # Setup Node.js and dfx
                  retry_command setup_nodejs
                  retry_command install_dfx

                  # Create external test environment
                  EXTERNAL_TEST_ENV_DIR_PATH=/home/tester/external_test_env
                  mkdir -p "${EXTERNAL_TEST_ENV_DIR_PATH}"
                  cd "${EXTERNAL_TEST_ENV_DIR_PATH}"

                  # Install packed azle
                  PACKED_FILE_ABSOLUTE_PATH="/home/tester/azle/${{ needs.setup-and-pack-wsl.outputs.packed-file-name }}"
                  echo "Installing the packed azle package for CLI testing"
                  npm install "${PACKED_FILE_ABSOLUTE_PATH}"

                  # Test azle version command
                  echo "=== Testing azle version command ==="
                  echo "Testing 'azle --version' command"
                  DISPLAYED_VERSION=$(npx azle --version)
                  echo "Displayed version: ${DISPLAYED_VERSION}"

                  # Verify the version matches our unique test version
                  if [[ "${DISPLAYED_VERSION}" == "${{ needs.setup-and-pack-wsl.outputs.test-version }}" ]]; then
                      echo "✅ Version verification successful: Running the correct packed version"
                  else
                      echo "❌ Version verification failed: Version mismatch"
                      echo "Expected to find: ${{ needs.setup-and-pack-wsl.outputs.test-version }}"
                      echo "But got: ${DISPLAYED_VERSION}"
                      exit 1
                  fi

    test-dev-setup-command-wsl:
        needs: setup-and-pack-wsl
        runs-on: windows-latest
        steps:
            - name: Setup WSL-Ubuntu
              uses: Wandalen/wretry.action@v1.4.10
              with:
                  action: Vampire/setup-wsl@v5
                  with: |
                      distribution: Ubuntu-24.04
                      additional-packages: |
                          curl
                          build-essential
                          git
                          jq
                          clang
                      set-as-default: 'true'
                      wsl-shell-user: 'tester'
                  attempt_limit: 5
                  attempt_delay: 60000

            - name: Clone repository in WSL-Ubuntu
              run: |
                  cd /home/tester
                  git clone --no-single-branch https://github.com/${{ github.repository }}.git azle
                  cd azle
                  git fetch --all
                  git fetch origin '+refs/pull/*/head:refs/remotes/origin/pr/*' || true
                  git fetch origin '+refs/pull/*/merge:refs/remotes/origin/merge/*' || true
                  git checkout ${{ github.sha }}
              shell: wsl-bash {0}

            - name: Download packed azle
              uses: actions/download-artifact@v4
              with:
                  name: azle-packed-wsl-ubuntu
                  path: /home/tester/azle/

            - name: Setup and test dev setup command
              shell: wsl-bash {0}
              run: |
                  cd /home/tester/azle

                  # Source common functions
                  source ".github/scripts/common_functions.sh"

                  # Setup Node.js and dfx
                  retry_command setup_nodejs
                  retry_command install_dfx

                  # Create external test environment
                  EXTERNAL_TEST_ENV_DIR_PATH=/home/tester/external_test_env
                  mkdir -p "${EXTERNAL_TEST_ENV_DIR_PATH}"
                  cd "${EXTERNAL_TEST_ENV_DIR_PATH}"

                  # Install packed azle
                  PACKED_FILE_ABSOLUTE_PATH="/home/tester/azle/${{ needs.setup-and-pack-wsl.outputs.packed-file-name }}"
                  echo "Installing the packed azle package for CLI testing"
                  npm install "${PACKED_FILE_ABSOLUTE_PATH}"

                  # Test azle dev setup command
                  echo "=== Testing azle dev setup command ==="

                  # Read expected versions from package.json
                  echo "Reading expected versions from package.json"
                  EXPECTED_NODE_VERSION=$(jq -r '.azle.globalDependencies.node // "not found"' "/home/tester/azle/package.json")
                  EXPECTED_RUST_VERSION=$(jq -r '.azle.globalDependencies.rust // "not found"' "/home/tester/azle/package.json")
                  EXPECTED_DFX_VERSION=$(jq -r '.azle.globalDependencies.dfx // "not found"' "/home/tester/azle/package.json")
                  EXPECTED_CARGO_AUDITABLE_VERSION=$(jq -r '.azle.globalDependencies."cargo-auditable" // "not found"' "/home/tester/azle/package.json")
                  EXPECTED_CARGO_AUDIT_VERSION=$(jq -r '.azle.globalDependencies."cargo-audit" // "not found"' "/home/tester/azle/package.json")
                  EXPECTED_CARGO_DENY_VERSION=$(jq -r '.azle.globalDependencies."cargo-deny" // "not found"' "/home/tester/azle/package.json")
                  EXPECTED_WASI2IC_VERSION=$(jq -r '.azle.globalDependencies.wasi2ic // "not found"' "/home/tester/azle/package.json")

                  echo "Expected Node version: ${EXPECTED_NODE_VERSION}"
                  echo "Expected Rust version: ${EXPECTED_RUST_VERSION}"
                  echo "Expected dfx version: ${EXPECTED_DFX_VERSION}"
                  echo "Expected cargo-auditable version: ${EXPECTED_CARGO_AUDITABLE_VERSION}"
                  echo "Expected cargo-audit version: ${EXPECTED_CARGO_AUDIT_VERSION}"
                  echo "Expected cargo-deny version: ${EXPECTED_CARGO_DENY_VERSION}"
                  echo "Expected wasi2ic version: ${EXPECTED_WASI2IC_VERSION}"

                  # Since wsl-ubuntu doesn't have cargo installed, we need to install it and ensure it's in the path
                  install_rust_cargo

                  echo "Running azle dev setup..."
                  npx azle dev setup

                  echo "Verifying installed versions match expected versions"

                  # Check Node version
                  ACTUAL_NODE_VERSION=$(node --version | sed 's/^v//')
                  echo "Actual Node version: ${ACTUAL_NODE_VERSION}"
                  if [[ "${ACTUAL_NODE_VERSION}" == "${EXPECTED_NODE_VERSION}" ]]; then
                      echo "✅ Node version verification successful"
                  else
                      echo "❌ Node version verification failed: Expected ${EXPECTED_NODE_VERSION}, got ${ACTUAL_NODE_VERSION}"
                      exit 1
                  fi

                  # Check Rust version
                  ACTUAL_RUST_VERSION=$(rustc --version | awk '{print $2}')
                  echo "Actual Rust version: ${ACTUAL_RUST_VERSION}"
                  if [[ "${ACTUAL_RUST_VERSION}" == "${EXPECTED_RUST_VERSION}" ]]; then
                      echo "✅ Rust version verification successful"
                  else
                      echo "❌ Rust version verification failed: Expected ${EXPECTED_RUST_VERSION}, got ${ACTUAL_RUST_VERSION}"
                      exit 1
                  fi

                  # Check dfx version
                  ACTUAL_DFX_VERSION=$(dfx --version | awk '{print $2}')
                  echo "Actual dfx version: ${ACTUAL_DFX_VERSION}"
                  if [[ "${ACTUAL_DFX_VERSION}" == "${EXPECTED_DFX_VERSION}" ]]; then
                      echo "✅ dfx version verification successful"
                  else
                      echo "❌ dfx version verification failed: Expected ${EXPECTED_DFX_VERSION}, got ${ACTUAL_DFX_VERSION}"
                      exit 1
                  fi

                  # Check cargo-auditable version
                  ACTUAL_CARGO_AUDITABLE_VERSION=$(npx tsx "/home/tester/azle/.github/scripts/get_local_cargo_auditable_version.ts" 2>/dev/null || echo "not installed")
                  echo "Actual cargo-auditable version: ${ACTUAL_CARGO_AUDITABLE_VERSION}"
                  if [[ "${ACTUAL_CARGO_AUDITABLE_VERSION}" == "${EXPECTED_CARGO_AUDITABLE_VERSION}" ]]; then
                      echo "✅ cargo-auditable version verification successful"
                  else
                      echo "❌ cargo-auditable version verification failed: Expected ${EXPECTED_CARGO_AUDITABLE_VERSION}, got ${ACTUAL_CARGO_AUDITABLE_VERSION}"
                      exit 1
                  fi

                  # Check cargo-audit version
                  ACTUAL_CARGO_AUDIT_VERSION=$(npx tsx "/home/tester/azle/.github/scripts/get_local_cargo_audit_version.ts" 2>/dev/null || echo "not installed")
                  echo "Actual cargo-audit version: ${ACTUAL_CARGO_AUDIT_VERSION}"
                  if [[ "${ACTUAL_CARGO_AUDIT_VERSION}" == "${EXPECTED_CARGO_AUDIT_VERSION}" ]]; then
                      echo "✅ cargo-audit version verification successful"
                  else
                      echo "❌ cargo-audit version verification failed: Expected ${EXPECTED_CARGO_AUDIT_VERSION}, got ${ACTUAL_CARGO_AUDIT_VERSION}"
                      exit 1
                  fi

                  # Check cargo-deny version
                  ACTUAL_CARGO_DENY_VERSION=$(npx tsx "/home/tester/azle/.github/scripts/get_local_cargo_deny_version.ts" 2>/dev/null || echo "not installed")
                  echo "Actual cargo-deny version: ${ACTUAL_CARGO_DENY_VERSION}"
                  if [[ "${ACTUAL_CARGO_DENY_VERSION}" == "${EXPECTED_CARGO_DENY_VERSION}" ]]; then
                      echo "✅ cargo-deny version verification successful"
                  else
                      echo "❌ cargo-deny version verification failed: Expected ${EXPECTED_CARGO_DENY_VERSION}, got ${ACTUAL_CARGO_DENY_VERSION}"
                      exit 1
                  fi

                  # Check wasi2ic version
                  ACTUAL_WASI2IC_VERSION=$(npx tsx "/home/tester/azle/.github/scripts/get_local_wasi2ic_version.ts" 2>/dev/null || echo "not installed")
                  echo "Actual wasi2ic version: ${ACTUAL_WASI2IC_VERSION}"
                  if [[ "${ACTUAL_WASI2IC_VERSION}" == "${EXPECTED_WASI2IC_VERSION}" ]]; then
                      echo "✅ wasi2ic version verification successful"
                  else
                      echo "❌ wasi2ic version verification failed: Expected ${EXPECTED_WASI2IC_VERSION}, got ${ACTUAL_WASI2IC_VERSION}"
                      exit 1
                  fi

                  echo "✅ All version verifications completed successfully"

    test-dev-template-commands-wsl:
        needs: setup-and-pack-wsl
        runs-on: windows-latest
        steps:
            - name: Setup WSL-Ubuntu
              uses: Wandalen/wretry.action@v1.4.10
              with:
                  action: Vampire/setup-wsl@v5
                  with: |
                      distribution: Ubuntu-24.04
                      additional-packages: |
                          curl
                          build-essential
                          git
                          jq
                          clang
                      set-as-default: 'true'
                      wsl-shell-user: 'tester'
                  attempt_limit: 5
                  attempt_delay: 60000

            - name: Clone repository in WSL-Ubuntu
              run: |
                  cd /home/tester
                  git clone --no-single-branch https://github.com/${{ github.repository }}.git azle
                  cd azle
                  git fetch --all
                  git fetch origin '+refs/pull/*/head:refs/remotes/origin/pr/*' || true
                  git fetch origin '+refs/pull/*/merge:refs/remotes/origin/merge/*' || true
                  git checkout ${{ github.sha }}
              shell: wsl-bash {0}

            - name: Setup and test dev template commands
              shell: wsl-bash {0}
              run: |
                  cd /home/tester/azle

                  # Source common functions
                  source ".github/scripts/common_functions.sh"

                  # Setup dependencies
                  retry_command setup_nodejs
                  retry_command install_dfx
                  retry_command install_npm_dependencies

                  # Setup Rust dependencies for template building
                  echo "=== Setting up Rust dependencies for template building ==="
                  npx azle dev setup --cargo-all

                  # Test azle dev template commands
                  echo "=== Testing azle dev template commands ==="

                  # Helper function to clean all template files
                  clean_templates() {
                      echo "Cleaning all template files"
                      rm -f dist/canister_templates/stable.wasm
                      rm -f dist/canister_templates/experimental.wasm
                  }

                  # Helper function to check file size (cross-platform)
                  check_file_size() {
                      local file="$1"
                      local file_size=$(wc -c < "$file" 2>/dev/null || echo "0")
                      if [[ "$file_size" -gt 0 ]]; then
                          return 0
                      else
                          return 1
                      fi
                  }

                  # Remove existing template files to test regeneration
                  echo "Initial cleanup: Removing existing template files for regeneration test"
                  clean_templates

                  # Test azle dev template (stable)
                  echo "Testing 'azle dev template' command (stable only)"
                  npx azle dev template

                  # Verify stable template was created and has valid size
                  if [[ -f "dist/canister_templates/stable.wasm" ]]; then
                      echo "✅ Stable template file created successfully"
                      if ! check_file_size "dist/canister_templates/stable.wasm"; then
                          echo "❌ Stable template size check failed during stable-only test"
                          exit 1
                      fi
                  else
                      echo "❌ Stable template verification failed: stable.wasm was not created"
                      exit 1
                  fi

                  # Verify experimental template was NOT created
                  if [[ -f "dist/canister_templates/experimental.wasm" ]]; then
                      echo "❌ Stable command verification failed: experimental.wasm should not have been created"
                      exit 1
                  else
                      echo "✅ Stable command verification successful: experimental.wasm was correctly not created"
                  fi

                  # Clean templates for next test
                  clean_templates

                  # Test azle dev template --experimental
                  echo "Testing 'azle dev template --experimental' command (experimental only)"
                  npx azle dev template --experimental

                  # Verify experimental template was created and has valid size
                  if [[ -f "dist/canister_templates/experimental.wasm" ]]; then
                      echo "✅ Experimental template file created successfully"
                          if ! check_file_size "dist/canister_templates/experimental.wasm"; then
                          echo "❌ Experimental template size check failed during experimental-only test"
                      exit 1
                      fi
                  else
                      echo "❌ Experimental template verification failed: experimental.wasm was not created"
                      exit 1
                  fi

                  # Verify stable template was NOT created
                  if [[ -f "dist/canister_templates/stable.wasm" ]]; then
                      echo "❌ Experimental command verification failed: stable.wasm should not have been created"
                      exit 1
                  else
                      echo "✅ Experimental command verification successful: stable.wasm was correctly not created"
                  fi

                  # Clean templates for final test
                  clean_templates

                  # Test azle dev template --all
                  echo "Testing 'azle dev template --all' command (both templates)"
                  npx azle dev template --all

                  if [[ -f "dist/canister_templates/stable.wasm" ]]; then
                      echo "✅ Stable template file created successfully"
                      if ! check_file_size "dist/canister_templates/stable.wasm"; then
                          echo "❌ Stable template size check failed during --all test"
                          exit 1
                      fi
                  else
                      echo "❌ All templates verification failed: stable.wasm was not created"
                      exit 1
                  fi

                  if [[ -f "dist/canister_templates/experimental.wasm" ]]; then
                      echo "✅ Experimental template file created successfully"
                      if ! check_file_size "dist/canister_templates/experimental.wasm"; then
                          echo "❌ Experimental template size check failed during --all test"
                          exit 1
                      fi
                  else
                      echo "❌ All templates verification failed: experimental.wasm was not created"
                      exit 1
                  fi

                  echo "✅ All templates verification successful: Both stable.wasm and experimental.wasm were created with valid sizes"

            # TODO This is suspicious, not sure it will work with wsl
            - uses: Swatinem/rust-cache@v2

    test-generate-command-wsl:
        needs: setup-and-pack-wsl
        runs-on: windows-latest
        steps:
            - name: Setup WSL-Ubuntu
              uses: Wandalen/wretry.action@v1.4.10
              with:
                  action: Vampire/setup-wsl@v5
                  with: |
                      distribution: Ubuntu-24.04
                      additional-packages: |
                          curl
                          build-essential
                          git
                          jq
                          clang
                      set-as-default: 'true'
                      wsl-shell-user: 'tester'
                  attempt_limit: 5
                  attempt_delay: 60000

            - name: Clone repository in WSL-Ubuntu
              run: |
                  cd /home/tester
                  git clone --no-single-branch https://github.com/${{ github.repository }}.git azle
                  cd azle
                  git fetch --all
                  git fetch origin '+refs/pull/*/head:refs/remotes/origin/pr/*' || true
                  git fetch origin '+refs/pull/*/merge:refs/remotes/origin/merge/*' || true
                  git checkout ${{ github.sha }}
              shell: wsl-bash {0}

            - name: Download packed azle
              uses: actions/download-artifact@v4
              with:
                  name: azle-packed-wsl-ubuntu
                  path: /home/tester/azle/

            - name: Setup and test generate command
              shell: wsl-bash {0}
              run: |
                  cd /home/tester/azle

                  # Source common functions
                  source ".github/scripts/common_functions.sh"

                  # Setup Node.js and dfx
                  retry_command setup_nodejs
                  retry_command install_dfx

                  # Create external test environment
                  EXTERNAL_TEST_ENV_DIR_PATH=/home/tester/external_test_env
                  mkdir -p "${EXTERNAL_TEST_ENV_DIR_PATH}"
                  cd "${EXTERNAL_TEST_ENV_DIR_PATH}"

                  # Install packed azle
                  PACKED_FILE_ABSOLUTE_PATH="/home/tester/azle/${{ needs.setup-and-pack-wsl.outputs.packed-file-name }}"
                  echo "Installing the packed azle package for CLI testing"
                  npm install "${PACKED_FILE_ABSOLUTE_PATH}"

                  # Test azle generate command
                  echo "=== Testing azle generate command ==="
                  echo "Testing 'azle generate' command with output verification"

                  # Test the generate command with the packed version
                  echo "Running azle generate command"
                  npx azle generate "/home/tester/azle/src/stable/lib/canisters/management/idl/ic.did" > generate_output.ts

                  # Verify the generated file exists and is not empty
                  echo "Verifying azle generate command output"
                  if [[ -f "generate_output.ts" ]]; then
                      FILE_SIZE=$(wc -c < "generate_output.ts" 2>/dev/null || echo "0")
                      if [[ "$FILE_SIZE" -gt 0 ]]; then
                          echo "✅ Generate command verification successful: Generated file exists and has valid size ($FILE_SIZE bytes)"
                      else
                          echo "❌ Generate command verification failed: Generated file is empty (0 bytes)"
                          exit 1
                      fi
                  else
                      echo "❌ Generate command verification failed: Generated file does not exist"
                      exit 1
                  fi

    test-stable-project-creation-wsl:
        needs: setup-and-pack-wsl
        runs-on: windows-latest
        steps:
            - name: Setup WSL-Ubuntu
              uses: Wandalen/wretry.action@v1.4.10
              with:
                  action: Vampire/setup-wsl@v5
                  with: |
                      distribution: Ubuntu-24.04
                      additional-packages: |
                          curl
                          build-essential
                          git
                          jq
                          clang
                      set-as-default: 'true'
                      wsl-shell-user: 'tester'
                  attempt_limit: 5
                  attempt_delay: 60000

            - name: Clone repository in WSL-Ubuntu
              run: |
                  cd /home/tester
                  git clone --no-single-branch https://github.com/${{ github.repository }}.git azle
                  cd azle
                  git fetch --all
                  git fetch origin '+refs/pull/*/head:refs/remotes/origin/pr/*' || true
                  git fetch origin '+refs/pull/*/merge:refs/remotes/origin/merge/*' || true
                  git checkout ${{ github.sha }}
              shell: wsl-bash {0}

            - name: Download packed azle
              uses: actions/download-artifact@v4
              with:
                  name: azle-packed-wsl-ubuntu
                  path: /home/tester/azle/

            - name: Setup and test stable project creation
              shell: wsl-bash {0}
              run: |
                  cd /home/tester/azle

                  # Source common functions
                  source ".github/scripts/common_functions.sh"

                  # Setup dependencies
                  retry_command setup_nodejs
                  retry_command install_dfx
                  retry_command install_npm_dependencies

                  # Create external test environment
                  EXTERNAL_TEST_ENV_DIR_PATH=/home/tester/external_test_env
                  mkdir -p "${EXTERNAL_TEST_ENV_DIR_PATH}"
                  cd "${EXTERNAL_TEST_ENV_DIR_PATH}"

                  # Install packed azle
                  PACKED_FILE_ABSOLUTE_PATH="/home/tester/azle/${{ needs.setup-and-pack-wsl.outputs.packed-file-name }}"
                  echo "Installing the packed azle package for CLI testing"
                  npm install "${PACKED_FILE_ABSOLUTE_PATH}"

                  # Start dfx for testing
                  echo "=== Starting dfx for testing new command ==="
                  dfx start --clean --background --artificial-delay 0

                  # Test azle new command for stable project
                  echo "=== Testing azle new command for stable_project_test ==="
                  echo "Creating new azle project: stable_project_test"
                  echo "Creating stable project"
                  npx azle new "stable_project_test"

                  # Verify project was created
                  if [[ ! -d "stable_project_test" ]]; then
                      echo "❌ Project directory was not created"
                      exit 1
                  fi

                  echo "✅ Project directory created successfully"

                  # Install the packed azle file to override the version
                  cd "stable_project_test"
                  echo "Installing packed azle package in new project..."
                  npm install "${PACKED_FILE_ABSOLUTE_PATH}"

                  # Verify azle version using the CLI (not package.json)
                  echo "Verifying azle version in stable_project_test project"
                  DISPLAYED_VERSION=$(npx azle --version)
                  echo "Displayed version: ${DISPLAYED_VERSION}"

                  if [[ "${DISPLAYED_VERSION}" == "${{ needs.setup-and-pack-wsl.outputs.test-version }}" ]]; then
                      echo "✅ Version verification successful: New project using correct azle version"
                  else
                      echo "❌ Version verification failed: Version mismatch in new project"
                      echo "Expected to find: ${{ needs.setup-and-pack-wsl.outputs.test-version }}"
                      echo "But got: ${DISPLAYED_VERSION}"
                      exit 1
                  fi

                  # Run the project tests
                  echo "Running tests for stable_project_test project"
                  AZLE_IDENTITY_STORAGE_MODE=plaintext npm test

                  # Verify build artifacts exist
                  echo "Verifying .azle directory exists in stable_project_test project"
                  if [[ -d ".azle" ]]; then
                      echo "✅ .azle directory exists as expected after build"
                  else
                      echo "❌ .azle directory does not exist but should after running tests"
                      exit 1
                  fi

                  # Test azle clean command
                  echo "Testing azle clean command in stable_project_test project"
                  npx azle clean

                  # Verify clean command effectiveness
                  echo "Verifying .azle directory was removed by clean command"
                  if [[ -d ".azle" ]]; then
                      echo "❌ .azle directory still exists but should have been removed by clean command"
                      exit 1
                  else
                      echo "✅ .azle directory was successfully removed by clean command"
                  fi

                  echo "✅ stable_project_test project creation test completed successfully"

    test-experimental-project-creation-wsl:
        needs: setup-and-pack-wsl
        runs-on: windows-latest
        steps:
            - name: Setup WSL-Ubuntu
              uses: Wandalen/wretry.action@v1.4.10
              with:
                  action: Vampire/setup-wsl@v5
                  with: |
                      distribution: Ubuntu-24.04
                      additional-packages: |
                          curl
                          build-essential
                          git
                          jq
                          clang
                      set-as-default: 'true'
                      wsl-shell-user: 'tester'
                  attempt_limit: 5
                  attempt_delay: 60000

            - name: Clone repository in WSL-Ubuntu
              run: |
                  cd /home/tester
                  git clone --no-single-branch https://github.com/${{ github.repository }}.git azle
                  cd azle
                  git fetch --all
                  git fetch origin '+refs/pull/*/head:refs/remotes/origin/pr/*' || true
                  git fetch origin '+refs/pull/*/merge:refs/remotes/origin/merge/*' || true
                  git checkout ${{ github.sha }}
              shell: wsl-bash {0}

            - name: Download packed azle
              uses: actions/download-artifact@v4
              with:
                  name: azle-packed-wsl-ubuntu
                  path: /home/tester/azle/

            - name: Setup and test experimental project creation
              shell: wsl-bash {0}
              run: |
                  cd /home/tester/azle

                  # Source common functions
                  source ".github/scripts/common_functions.sh"

                  # Setup dependencies
                  retry_command setup_nodejs
                  retry_command install_dfx
                  retry_command install_npm_dependencies

                  # Create external test environment
                  EXTERNAL_TEST_ENV_DIR_PATH=/home/tester/external_test_env
                  mkdir -p "${EXTERNAL_TEST_ENV_DIR_PATH}"
                  cd "${EXTERNAL_TEST_ENV_DIR_PATH}"

                  # Install packed azle
                  PACKED_FILE_ABSOLUTE_PATH="/home/tester/azle/${{ needs.setup-and-pack-wsl.outputs.packed-file-name }}"
                  echo "Installing the packed azle package for CLI testing"
                  npm install "${PACKED_FILE_ABSOLUTE_PATH}"

                  # Start dfx for testing
                  echo "=== Starting dfx for testing new command ==="
                  dfx start --clean --background --artificial-delay 0

                  # Test azle new command for experimental project
                  echo "=== Testing azle new command for experimental_project_test ==="
                  echo "Creating new azle project: experimental_project_test"
                  echo "Creating experimental project"
                  npx azle new "experimental_project_test" --experimental

                  # Verify project was created
                  if [[ ! -d "experimental_project_test" ]]; then
                      echo "❌ Project directory was not created"
                      exit 1
                  fi

                  echo "✅ Project directory created successfully"

                  # Install the packed azle file to override the version
                  cd "experimental_project_test"
                  echo "Installing packed azle package in new project..."
                  npm install "${PACKED_FILE_ABSOLUTE_PATH}"

                  # Verify azle version using the CLI (not package.json)
                  echo "Verifying azle version in experimental_project_test project"
                  DISPLAYED_VERSION=$(npx azle --version)
                  echo "Displayed version: ${DISPLAYED_VERSION}"

                  if [[ "${DISPLAYED_VERSION}" == "${{ needs.setup-and-pack-wsl.outputs.test-version }}" ]]; then
                      echo "✅ Version verification successful: New project using correct azle version"
                  else
                      echo "❌ Version verification failed: Version mismatch in new project"
                      echo "Expected to find: ${{ needs.setup-and-pack-wsl.outputs.test-version }}"
                      echo "But got: ${DISPLAYED_VERSION}"
                      exit 1
                  fi

                  # Run the project tests
                  echo "Running tests for experimental_project_test project"
                  AZLE_IDENTITY_STORAGE_MODE=plaintext AZLE_EXPERIMENTAL=true npm test

                  # Verify build artifacts exist
                  echo "Verifying .azle directory exists in experimental_project_test project"
                  if [[ -d ".azle" ]]; then
                      echo "✅ .azle directory exists as expected after build"
                  else
                      echo "❌ .azle directory does not exist but should after running tests"
                      exit 1
                  fi

                  # Test azle clean command
                  echo "Testing azle clean command in experimental_project_test project"
                  npx azle clean

                  # Verify clean command effectiveness
                  echo "Verifying .azle directory was removed by clean command"
                  if [[ -d ".azle" ]]; then
                      echo "❌ .azle directory still exists but should have been removed by clean command"
                      exit 1
                  else
                      echo "✅ .azle directory was successfully removed by clean command"
                  fi

                  echo "✅ experimental_project_test project creation test completed successfully"

    test-cli-commands-outside-azle-repo-wsl-ubuntu:
        needs:
            [
                setup-and-pack-wsl,
                test-version-command-wsl,
                test-dev-setup-command-wsl,
                test-dev-template-commands-wsl,
                test-generate-command-wsl,
                test-stable-project-creation-wsl,
                test-experimental-project-creation-wsl
            ]
        runs-on: windows-latest
        steps:
            - name: All tests passed
              run: echo "🎉 All CLI command tests completed successfully!"
