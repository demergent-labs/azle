name: Example/test maintenance (package-lock updating, formatting, linting)
on:
    workflow_dispatch:
        inputs:
            delete_package_lock:
                description: 'Delete package-lock.json files before npm install'
                required: false
                default: false
                type: boolean
    schedule:
        # Run at 10:00 UTC (4:00 AM MT) every day
        - cron: '0 10 * * *'

permissions:
    contents: read

jobs:
    determine-prefix:
        runs-on: ubuntu-latest
        outputs:
            prefix: ${{ steps.set-prefix.outputs.prefix }}
        steps:
            - id: set-prefix
              run: echo "prefix=maintenance-$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT

    create-branch-prefix:
        permissions:
            contents: write
        needs:
            - determine-prefix
        uses: ./.github/workflows/create_branch_prefix.yml
        with:
            prefix: ${{ needs.determine-prefix.outputs.prefix }}
            version: $(jq -r '.version' package.json)

    prepare-maintenance:
        name: Prepare Maintenance
        permissions:
            contents: write
        needs:
            - create-branch-prefix
        runs-on: ubuntu-latest
        outputs:
            test-infos: ${{ steps.get-test-infos.outputs.test-infos }}
        steps:
            - uses: actions/checkout@v4
              with:
                  ref: ${{ needs.create-branch-prefix.outputs.base-branch }}

            - uses: ./.github/actions/setup_node

            - uses: ./.github/actions/setup_dfx

            - uses: ./.github/actions/retry_command
              with:
                  command: 'npm install'

            # Conditionally delete and update workspace package-lock.json
            - name: Delete workspace package-lock.json
              if: ${{ github.event.inputs.delete_package_lock == 'true' }}
              run: if [ -f package-lock.json ]; then rm package-lock.json; fi
              working-directory: ./examples

            - name: Update workspace dependencies
              uses: ./.github/actions/retry_command
              with:
                  command: 'npm install'
                  working-directory: ${{ github.workspace }}/examples

            # Run global prettier/lint fixes
            - name: Run Prettier
              run: npx prettier --write .

            - name: Run ESLint
              run: npx eslint . --fix

            - uses: ./.github/actions/commit_and_push
              with:
                  branch-name: ${{ needs.create-branch-prefix.outputs.base-branch }}
                  commit-message: 'Example/test maintenance: formatting and linting'

            - id: get-test-infos
              uses: ./.github/actions/get_test_infos
              with:
                  directories: ${{ github.workspace }}/examples

    update-test-dependencies:
        name: Update dependencies for ${{ matrix.test.name }}
        permissions:
            contents: write
        needs:
            - prepare-maintenance
            - create-branch-prefix
        runs-on: ubuntu-latest
        strategy:
            fail-fast: false
            matrix:
                test: ${{ fromJson(needs.prepare-maintenance.outputs.test-infos) }}
        steps:
            - uses: actions/checkout@v4
              with:
                  ref: ${{ needs.create-branch-prefix.outputs.base-branch }}

            - uses: ./.github/actions/setup_node

            - uses: ./.github/actions/setup_dfx

            - name: Install azle dependencies
              uses: ./.github/actions/retry_command
              with:
                  command: 'npm install'

            # Install dependencies at the examples workspace root
            - name: Install workspace dependencies
              uses: ./.github/actions/retry_command
              with:
                  command: 'npm install'
                  working-directory: ${{ github.workspace }}/examples

            # Conditionally delete package-lock.json if input is true
            - name: Delete package-lock.json
              if: ${{ github.event.inputs.delete_package_lock == 'true' }}
              run: if [ -f package-lock.json ]; then rm package-lock.json; fi
              working-directory: ${{ matrix.test.path }}

            # Update package-lock.json in test directory
            - name: Update package-lock.json
              uses: ./.github/actions/retry_command
              with:
                  command: 'npm install'
                  working-directory: ${{ matrix.test.path }}

            - name: Create branch name
              id: create-branch-name
              uses: ./.github/actions/create_branch_name
              with:
                  prefix: ${{ needs.create-branch-prefix.outputs.branch-prefix }}
                  path: ${{ matrix.test.displayPath }}

            - uses: ./.github/actions/create_branch
              with:
                  branch-name: ${{ steps.create-branch-name.outputs.branch-name }}

            - uses: ./.github/actions/commit_and_push
              with:
                  branch-name: ${{ steps.create-branch-name.outputs.branch-name }}
                  commit-message: 'Example/test maintenance: update dependencies'

    squash-branches:
        permissions:
            contents: write
        needs:
            - update-test-dependencies
            - create-branch-prefix
        uses: ./.github/workflows/squash_branches.yml
        with:
            base-branch: ${{ needs.create-branch-prefix.outputs.base-branch }}
            branch-prefix: ${{ needs.create-branch-prefix.outputs.branch-prefix }}
            commit-message: 'Example/test maintenance: update dependencies'

    create-pr:
        needs:
            - squash-branches
            - create-branch-prefix
        runs-on: ubuntu-latest
        steps:
            - name: Generate GitHub App Token
              id: github-app-auth
              uses: actions/create-github-app-token@v2
              with:
                  app-id: ${{ vars.AZLE_BOT_ID }}
                  private-key: ${{ secrets.AZLE_BOT_KEY }}

            - uses: actions/checkout@v4
              with:
                  ref: ${{ github.ref }}
                  fetch-depth: 0

            - name: Check for differences
              id: check-diff
              run: |
                  git fetch origin main
                  if git diff --quiet origin/main ${{ needs.create-branch-prefix.outputs.base-branch }}; then
                    echo "No differences found between branches"
                    echo "has_changes=false" >> $GITHUB_OUTPUT
                  else
                    echo "Changes detected"
                    echo "has_changes=true" >> $GITHUB_OUTPUT
                  fi

            - name: Create Pull Request
              if: steps.check-diff.outputs.has_changes == 'true'
              env:
                  GH_TOKEN: ${{ steps.github-app-auth.outputs.token }}
              run: |
                  gh pr create \
                    --base main \
                    --head ${{ needs.create-branch-prefix.outputs.base-branch }} \
                    --title "Example/test maintenance: update dependencies, formatting, and linting" \
                    --body "Automated PR for maintenance tasks:
                    - Updated package-lock.json files
                    - Fixed formatting with Prettier
                    - Fixed linting issues with ESLint"
