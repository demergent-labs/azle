name: Parallel Release
on:
    workflow_call:
        secrets:
            GPG_SIGNING_KEY:
                required: true
            GH_TOKEN:
                required: true
            NPM_TOKEN:
                required: true
            LASTMJS_GITHUB_TOKEN:
                required: true

jobs:
    prepare-release:
        name: Prepare Release
        runs-on: ubuntu-latest
        env:
            GPG_SIGNING_KEY: ${{ secrets.GPG_SIGNING_KEY }} # All commits must be verified
            GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        outputs:
            release-version: ${{ steps.get-version.outputs.release-version }}
            test-infos: ${{ steps.get-test-infos.outputs.test-infos }}
        steps:
            - uses: actions/checkout@v4
              with:
                  ref: ${{ github.event.pull_request.head.ref || github.ref }}
                  token: ${{ secrets.LASTMJS_GITHUB_TOKEN || github.token }}

            - id: get-version
              run: |
                  BRANCH_NAME="${{ github.event.pull_request.head.ref || github.ref_name }}"
                  RELEASE_VERSION="${BRANCH_NAME:9}"
                  echo "release-version=$RELEASE_VERSION" >> $GITHUB_OUTPUT

            - uses: ./.github/actions/setup_node
              with:
                  registry-url: https://registry.npmjs.org
              env:
                  NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

            - uses: ./.github/actions/setup_dfx

            - run: npm install

            - name: Install global dependencies
              run: |
                  AZLE_VERBOSE=true npx azle install-global-dependencies --rust --wasi2ic

            - uses: ./.github/actions/configure_git
              with:
                  gpg_signing_key: ${{ secrets.GPG_SIGNING_KEY }}

            - name: Update version and build templates
              run: |
                  VERSION=${{ steps.get-version.outputs.release-version }}
                  sed -E -i "s/(\"version\": \")(.*)(\")/\1$VERSION\3/" package.json
                  sed -E -i "s/(\"version\": \")(.*)(\")/\1$VERSION\3/" dfx_extension/extension.json
                  npm install
                  AZLE_VERBOSE=true npx azle template
                  AZLE_VERBOSE=true npx azle template --experimental

            - name: Publish to npm
              run: |
                  if [[ "${{ steps.get-version.outputs.release-version }}" == *"-rc."* ]]; then
                    npm publish --tag next
                  else
                    npm publish
                  fi

            - id: get-test-infos
              uses: ./.github/actions/get_test_infos
              with:
                  directories: |
                      ./examples
                      ./tests

    update-test-files-for-release-commit:
        needs: prepare-release
        name: Update ${{ matrix.test.name }} files for release commit
        runs-on: ubuntu-latest
        env:
            GPG_SIGNING_KEY: ${{ secrets.GPG_SIGNING_KEY }}
            GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        strategy:
            fail-fast: false
            matrix:
                test: ${{ fromJson(needs.prepare-release.outputs.test-infos) }}
        steps:
            - uses: actions/checkout@v4
              with:
                  ref: ${{ github.event.pull_request.head.ref || github.ref }}
                  token: ${{ secrets.LASTMJS_GITHUB_TOKEN || github.token }}

            - uses: ./.github/actions/setup_node

            - uses: ./.github/actions/setup_dfx

            - name: Update azle version
              run: |
                  npm install
                  cd ${{ matrix.test.path }}
                  sed -E -i "s/(\"azle\": \")(.*)(\")/\1${{ needs.prepare-release.outputs.release-version }}\3/" package.json
                  npm install

            - name: Start dfx with artificial delay 0
              working-directory: ${{ matrix.test.path }}
              run: dfx start --clean --background --host 127.0.0.1:8000 --artificial-delay 0

            - name: Run npm test (continue on error)
              working-directory: ${{ matrix.test.path }}
              continue-on-error: true
              run: npm test

            - uses: ./.github/actions/configure_git
              with:
                  gpg_signing_key: ${{ secrets.GPG_SIGNING_KEY }}

            - name: Commit and push changes
              run: |
                  BRANCH_NAME="update--${{ needs.prepare-release.outputs.release-version }}-$(echo '${{ matrix.test.displayPath }}' | sed 's/\//-/g')"
                  git switch -c "$BRANCH_NAME"
                  git add --all
                  if ! git diff --cached --quiet; then
                    git commit -m "Update dependencies for ${{ matrix.test.displayPath }}"
                  else
                    echo "No changes to commit. Skipping commit and push."
                  fi
                  git push origin "$BRANCH_NAME"

    finalize-release:
        needs: [prepare-release, update-test-files-for-release-commit]
        name: Finalize Release
        runs-on: ubuntu-latest
        env:
            GPG_SIGNING_KEY: ${{ secrets.GPG_SIGNING_KEY }}
            GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        steps:
            - uses: actions/checkout@v4
              with:
                  ref: ${{ github.event.pull_request.head.ref || github.ref }}
                  token: ${{ secrets.LASTMJS_GITHUB_TOKEN }}
                  fetch-depth: 0

            - uses: ./.github/actions/configure_git
              with:
                  gpg_signing_key: ${{ secrets.GPG_SIGNING_KEY }}

            - name: Collect branches
              id: collect-branches
              run: |
                  # Create array of branches
                  readarray -t BRANCH_ARRAY < <(git branch -r | grep "origin/update--${{ needs.prepare-release.outputs.release-version }}-" | sed 's/origin\///' | xargs -n1)

                  # Output array elements as multiline value
                  echo "branches<<EOF" >> $GITHUB_OUTPUT
                  printf '%s\n' "${BRANCH_ARRAY[@]}" >> $GITHUB_OUTPUT
                  echo "EOF" >> $GITHUB_OUTPUT

            - name: Display collected branches
              run: |
                  echo "Collected branches:"
                  while read branch; do
                    echo "  - $branch"
                  done < <(echo "${{ steps.collect-branches.outputs.branches }}")
                  echo "End of branch list"

            - name: Fetch branches
              run: |
                  echo "Fetching all branches..."
                  BRANCHES_TO_FETCH=""
                  while read branch; do
                    BRANCHES_TO_FETCH+=" ${branch}:${branch}"
                  done < <(echo "${{ steps.collect-branches.outputs.branches }}")

                  echo "BRANCHES_TO_FETCH: $BRANCHES_TO_FETCH"
                  git fetch origin ${BRANCHES_TO_FETCH}

            - name: Squash changes
              env:
                  PAT: ${{ secrets.LASTMJS_GITHUB_TOKEN }}
              run: |
                  CURRENT_BRANCH=$(git branch --show-current)
                  BASE_COMMIT=$(git rev-parse HEAD)

                  while read branch; do
                    echo "Merging changes from branch: $branch"
                    git merge --squash "$branch" || {
                      echo "Failed to merge $branch"
                      git merge --abort
                      exit 1
                    }
                    git commit -m "Squashed changes from $branch" || true
                  done < <(echo "${{ steps.collect-branches.outputs.branches }}")

                  git reset --soft $BASE_COMMIT
                  git commit -am "Update all dependencies for release ${{ needs.prepare-release.outputs.release-version }}"

                  git push origin HEAD:$CURRENT_BRANCH

            - name: Delete branches
              run: |
                  echo "Starting branch deletion process..."
                  BRANCHES_TO_DELETE=""
                  while read branch; do
                    BRANCHES_TO_DELETE+=" ${branch}"
                  done < <(echo "${{ steps.collect-branches.outputs.branches }}")

                  echo "BRANCHES_TO_DELETE: $BRANCHES_TO_DELETE"
                  git push origin --delete ${BRANCHES_TO_DELETE}

            - name: Create release
              run: |
                  VERSION=${{ needs.prepare-release.outputs.release-version }}
                  git tag $VERSION
                  git push origin $VERSION

                  if [[ "$VERSION" == *"-rc."* ]]; then
                    gh release create "$VERSION" -t "$VERSION" --prerelease
                  else
                    gh release create "$VERSION" -t "$VERSION"
                  fi
