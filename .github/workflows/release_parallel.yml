name: Parallel Release
on:
    workflow_call:
        secrets:
            GPG_SIGNING_KEY:
                required: true
            GH_TOKEN:
                required: true
            NPM_TOKEN:
                required: true
            LASTMJS_GITHUB_TOKEN:
                required: true

jobs:
    prepare-release:
        name: Prepare Release
        runs-on: ubuntu-latest
        env:
            GPG_SIGNING_KEY: ${{ secrets.GPG_SIGNING_KEY }} # All commits must be verified
            GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        outputs:
            release-version: ${{ steps.get-version.outputs.release-version }}
            test-infos: ${{ steps.get-test-infos.outputs.test-infos }}
        steps:
            - uses: actions/checkout@v4
              with:
                  ref: ${{ github.event.pull_request.head.ref || github.ref }}
                  token: ${{ secrets.LASTMJS_GITHUB_TOKEN || github.token }}

            - id: get-version
              run: |
                  BRANCH_NAME="${{ github.event.pull_request.head.ref || github.ref_name }}"
                  RELEASE_VERSION="${BRANCH_NAME:9}"
                  echo "release-version=$RELEASE_VERSION" >> $GITHUB_OUTPUT

            - id: get-node-version
              uses: ./.github/actions/get_node_version

            - uses: actions/setup-node@v4
              with:
                  node-version: ${{ steps.get-node-version.outputs.node-version }}
                  registry-url: https://registry.npmjs.org
              env:
                  NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

            - name: Install curl
              run: sudo apt-get install curl -y

            - id: get-dfx-version
              uses: ./.github/actions/get_dfx_version

            - name: Install dfx
              run: |
                  # Install dfx (Note: dfx must be installed before `npx azle` because the azle installation process requires dfx)
                  src/build/stable/commands/install_global_dependencies/install_dfx.sh ${{ steps.get-dfx-version.outputs.dfx-version }}
                  echo "$HOME/.local/share/dfx/bin" >> $GITHUB_PATH

            - run: npm install

            - name: Install global dependencies
              run: |
                  AZLE_VERBOSE=true npx azle install-global-dependencies --rust --wasi2ic

            # TODO we should use some Action-specific bot account
            - name: Configure git for publishing release
              run: |
                  git config --global user.name 'Jordan Last'
                  git config --global user.email 'jordan.michael.last@gmail.com'
                  git config --global commit.gpgsign true
                  echo -n "$GPG_SIGNING_KEY" | base64 --decode | gpg --import
                  git config --global user.signingkey C8B77BCBE16CD2B94B43F9C8757397B82D4ED7B0

            - name: Update version and build templates
              run: |
                  VERSION=${{ steps.get-version.outputs.release-version }}
                  sed -E -i "s/(\"version\": \")(.*)(\")/\1$VERSION\3/" package.json
                  sed -E -i "s/(\"version\": \")(.*)(\")/\1$VERSION\3/" dfx_extension/extension.json
                  npm install
                  AZLE_VERBOSE=true npx azle template
                  AZLE_VERBOSE=true npx azle template --experimental

            - name: Publish to npm
              run: |
                  if [[ "${{ steps.get-version.outputs.release-version }}" == *"-rc."* ]]; then
                    npm publish --tag next
                  else
                    npm publish
                  fi

            - id: get-test-infos
              uses: ./.github/actions/get_test_infos
              with:
                  directories: |
                      ./examples
                      ./tests

    update-test-files-for-release-commit:
        needs: prepare-release
        name: Update ${{ matrix.test.name }}
        runs-on: ubuntu-latest
        env:
            GPG_SIGNING_KEY: ${{ secrets.GPG_SIGNING_KEY }}
            GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        strategy:
            fail-fast: false
            matrix:
                test: ${{ fromJson(needs.prepare-release.outputs.test-infos) }}
        steps:
            - uses: actions/checkout@v4
              with:
                  ref: ${{ github.event.pull_request.head.ref || github.ref }}
                  token: ${{ secrets.LASTMJS_GITHUB_TOKEN || github.token }}

            - id: get-node-version
              uses: ./.github/actions/get_node_version

            - uses: actions/setup-node@v4
              with:
                  node-version: ${{ steps.get-node-version.outputs.node-version }}

            - id: get-dfx-version
              uses: ./.github/actions/get_dfx_version

            - name: Install dfx
              run: |
                  # Install dfx (Note: dfx must be installed before `npx azle` because the azle installation process requires dfx)
                  src/build/stable/commands/install_global_dependencies/install_dfx.sh ${{ steps.get-dfx-version.outputs.dfx-version }}
                  echo "$HOME/.local/share/dfx/bin" >> $GITHUB_PATH

            - name: Update azle version
              run: |
                  npm install
                  cd ${{ matrix.test.path }}
                  sed -E -i "s/(\"azle\": \")(.*)(\")/\1${{ needs.prepare-release.outputs.release-version }}\3/" package.json
                  npm install
                  rm -rf node_modules

            # TODO we should use some Action-specific bot account
            - name: Commit and push changes
              run: |
                  git config --global user.name 'Jordan Last'
                  git config --global user.email 'jordan.michael.last@gmail.com'
                  git config --global commit.gpgsign true
                  echo -n "$GPG_SIGNING_KEY" | base64 --decode | gpg --import
                  git config --global user.signingkey C8B77BCBE16CD2B94B43F9C8757397B82D4ED7B0
                  BRANCH_NAME="update-${{ needs.prepare-release.outputs.release-version }}-$(echo '${{ matrix.test.displayPath }}' | sed 's/\//-/g')"
                  git switch -c "$BRANCH_NAME"
                  git add --all
                  if ! git diff --cached --quiet; then
                    git commit -m "Update dependencies for ${{ matrix.test.displayPath }}"
                  else
                    echo "No changes to commit. Skipping commit and push."
                  fi
                  git push origin "$BRANCH_NAME"

    finalize-release:
        needs: [prepare-release, update-test-files-for-release-commit]
        name: Finalize Release
        runs-on: ubuntu-latest
        env:
            GPG_SIGNING_KEY: ${{ secrets.GPG_SIGNING_KEY }}
            GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        steps:
            - uses: actions/checkout@v4
              with:
                  ref: ${{ github.event.pull_request.head.ref || github.ref }}
                  token: ${{ secrets.LASTMJS_GITHUB_TOKEN }}
                  fetch-depth: 0

            - name: Merge update branches
              env:
                  PAT: ${{ secrets.LASTMJS_GITHUB_TOKEN }}
              run: |
                  git config --global user.name 'Jordan Last'
                  git config --global user.email 'jordan.michael.last@gmail.com'
                  git config --global commit.gpgsign true
                  echo -n "$GPG_SIGNING_KEY" | base64 --decode | gpg --import
                  git config --global user.signingkey C8B77BCBE16CD2B94B43F9C8757397B82D4ED7B0

                  # Determine the current branch name
                  CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
                  echo "Current branch: $CURRENT_BRANCH"

                  # List and merge update branches
                  for branch in $(git branch -r | grep "origin/update-${{ needs.prepare-release.outputs.release-version }}-" | sed 's/origin\///'); do
                    echo "Merging branch: $branch"
                    git merge --no-ff "$branch" -m "Merge $branch" || {
                      echo "Failed to merge $branch"
                      git merge --abort
                      continue
                    }

                    # Delete the remote branch after successful merge
                    git push origin --delete "$branch"
                    echo "Deleted remote branch: $branch"
                  done

                  # Push changes using PAT
                  echo "Pushing changes to $CURRENT_BRANCH"
                  git push origin HEAD:$CURRENT_BRANCH || {
                    echo "Failed to push changes"
                    exit 1
                  }

            - name: Create release
              run: |
                  VERSION=${{ needs.prepare-release.outputs.release-version }}
                  git tag $VERSION
                  git push origin $VERSION

                  if [[ "$VERSION" == *"-rc."* ]]; then
                    gh release create "$VERSION" -t "$VERSION" --prerelease
                  else
                    gh release create "$VERSION" -t "$VERSION"
                  fi
