name: 'Test Azle Template'
description: 'Creates, tests, and verifies an Azle template project to ensure CLI commands work correctly outside the azle repository'

inputs:
    template_name:
        description: 'Name of the template project to be created'
        required: true
    experimental:
        description: 'Whether to use experimental mode'
        required: false
        default: 'false'
    http_server:
        description: 'Whether to include HTTP server (requires experimental mode)'
        required: false
        default: 'false'
    working_directory:
        description: 'Base working directory where the template will be created'
        required: true
    version:
        description: 'Expected Azle version for verification'
        required: true
    packed_file_path:
        description: 'Path to the packed azle file for installation'
        required: true

runs:
    using: 'composite'
    steps:
        - name: Create new azle template project
          working-directory: ${{ inputs.working_directory }}
          shell: bash
          run: |
              echo "Creating new azle template project: ${{ inputs.template_name }}"

              # Build the azle new command based on inputs
              NEW_COMMAND="npx azle new ${{ inputs.template_name }}"

              # Add experimental flag if specified
              if [ "${{ inputs.experimental }}" = "true" ]; then
                NEW_COMMAND="${NEW_COMMAND} --experimental"
                echo "Using experimental mode"
              fi

              # Add HTTP server flag if specified
              if [ "${{ inputs.http_server }}" = "true" ]; then
                NEW_COMMAND="${NEW_COMMAND} --http-server"
                echo "Including HTTP server support"
              fi

              # Execute the command and verify success
              echo "Executing command: ${NEW_COMMAND}"
              if ! ${NEW_COMMAND}; then
                echo "❌ Failed to create template project: ${{ inputs.template_name }}"
                exit 1
              fi

              echo "✅ Successfully created template project: ${{ inputs.template_name }}"

        - name: Install azle package in template project # TODO can we change this to use the retry command action?
          working-directory: ${{ inputs.working_directory }}/${{ inputs.template_name }}
          shell: bash
          run: |
              echo "Installing azle package in ${{ inputs.template_name }} project"

              if ! npm install ${{ inputs.packed_file_path }}; then
                echo "❌ Failed to install azle package in template project"
                exit 1
              fi

              echo "✅ Successfully installed azle package in template project"

        - name: Verify azle version in template project
          working-directory: ${{ inputs.working_directory }}/${{ inputs.template_name }}
          shell: bash
          run: |
              echo "Verifying azle version in ${{ inputs.template_name }} project"

              DISPLAYED_VERSION=$(npx azle --version)
              echo "Displayed version: ${DISPLAYED_VERSION}"

              # Verify the version matches our expected test version
              if [[ "${DISPLAYED_VERSION}" == *"${{ inputs.version }}"* ]]; then
                echo "✅ Version verification successful: Template project using correct azle version"
              else
                echo "❌ Version verification failed: Version mismatch in template project"
                echo "Expected to find: ${{ inputs.version }}"
                echo "But got: ${DISPLAYED_VERSION}"
                exit 1
              fi

        - name: Run template project tests
          working-directory: ${{ inputs.working_directory }}/${{ inputs.template_name }}
          shell: bash
          env:
              AZLE_IDENTITY_STORAGE_MODE: plaintext
          run: |
              echo "Running tests for ${{ inputs.template_name }} project"

              if ! npm test; then
                echo "❌ Template project tests failed"
                exit 1
              fi

              echo "✅ Template project tests passed successfully"

        - name: Verify azle build artifacts exist
          working-directory: ${{ inputs.working_directory }}/${{ inputs.template_name }}
          shell: bash
          run: |
              echo "Verifying .azle directory exists in ${{ inputs.template_name }} project"

              if [ -d ".azle" ]; then
                echo "✅ .azle directory exists as expected after build"
              else
                echo "❌ .azle directory does not exist but should after running tests"
                exit 1
              fi

        - name: Test azle clean command
          working-directory: ${{ inputs.working_directory }}/${{ inputs.template_name }}
          shell: bash
          run: |
              echo "Testing azle clean command in ${{ inputs.template_name }} project"

              if ! npx azle clean; then
                echo "❌ azle clean command failed"
                exit 1
              fi

              echo "✅ azle clean command executed successfully"

        - name: Verify azle clean command effectiveness
          working-directory: ${{ inputs.working_directory }}/${{ inputs.template_name }}
          shell: bash
          run: |
              echo "Verifying .azle directory was removed by clean command"

              if [ -d ".azle" ]; then
                echo "❌ .azle directory still exists but should have been removed by clean command"
                exit 1
              else
                echo "✅ .azle directory was successfully removed by clean command"
              fi
