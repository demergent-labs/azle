name: Commit and Push Changes
description: 'Commits and pushes changes with optional GPG signing using GitHub App token'

inputs:
    branch-name:
        description: 'Name of the branch to push to'
        required: true
    create-branch:
        description: 'Whether to create the branch if it does not exist'
        required: false
        default: 'false'
    commit-message:
        description: 'Commit message'
        required: true
    add-files:
        description: 'File pattern to git add. Defaults to "--all"'
        required: false
        default: '--all'
    token:
        description: 'GitHub App token'
        required: true
    gpg-private-key:
        description: 'GPG private key for signing commits (base64 encoded)'
        required: false
    gpg-passphrase:
        description: 'Passphrase for the GPG key'
        required: false
    committer-name:
        description: 'Committer name for signed commits'
        required: false
        default: 'azle-bot[bot]'
    committer-email:
        description: 'Committer email for signed commits'
        required: false
        default: 'azle-bot[bot]@users.noreply.github.com'

runs:
    using: composite
    steps:
        - name: Setup GPG if provided
          shell: bash
          if: ${{ inputs.gpg-private-key != '' }}
          run: |
              echo "Setting up GPG..."
              sudo apt-get update && sudo apt-get install -y gnupg
              echo "${{ inputs.gpg-private-key }}" | base64 --decode | gpg --batch --passphrase "${{ inputs.gpg-passphrase }}" --import
              git config --global commit.gpgsign true
              git config --global user.signingkey $(gpg --list-secret-keys --keyid-format=long | grep sec | awk '{print $2}' | cut -d '/' -f2)
        - name: Commit and push
          shell: bash
          env:
              GITHUB_TOKEN: ${{ inputs.token }}
          run: |
              REPO_OWNER="${{ github.repository_owner }}"
              REPO_NAME="${{ github.event.repository.name }}"
              REPO="$REPO_OWNER/$REPO_NAME"
              BASE_BRANCH="${{ github.ref_name }}"
              TARGET_BRANCH="${{ inputs.branch-name }}"

              # Configure git
              git config user.name "${{ inputs.committer-name }}"
              git config user.email "${{ inputs.committer-email }}"

              # Set authenticated remote
              git remote set-url --push origin "https://x-access-token:${GITHUB_TOKEN}@github.com/${REPO}.git"

              # Fetch latest
              git fetch origin

              # Handle branch
              if [[ "${{ inputs.create-branch }}" == "true" ]]; then
                if git rev-parse "origin/$TARGET_BRANCH" >/dev/null 2>&1; then
                  git checkout "$TARGET_BRANCH"
                else
                  git checkout -b "$TARGET_BRANCH" "origin/$BASE_BRANCH"
                fi
              else
                git checkout "$TARGET_BRANCH"
              fi

              # Add changes
              git add "${{ inputs.add-files }}"

              if git diff --cached --quiet; then
                echo "No changes to commit"
                exit 0
              fi

              # Commit with sign if GPG set up
              if [ -n "${{ inputs.gpg-private-key }}" ]; then
                git commit -S -m "${{ inputs.commit-message }}"
              else
                git commit -m "${{ inputs.commit-message }}"
              fi

              # Push
              git push origin "$TARGET_BRANCH"

              echo "Successfully committed and pushed to $TARGET_BRANCH"
