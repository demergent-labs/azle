name: Commit and Push Changes
description: 'Uses GitHub API to commit changes and push to a branch (commits will be signed by GitHub App)'
inputs:
    branch-name:
        description: 'Name of the branch to push to'
        required: true
    create-branch:
        description: 'Whether to create the branch specified by branch-name'
        required: false
        default: 'false'
    commit-message:
        description: 'Commit message'
        required: true
    add-files:
        description: 'Optional file pattern to limit git add. E.g. "src/" to only add changes from the src directory. Defaults to "--all" to add all changes.'
        required: false
        default: '--all'
    token:
        description: 'GitHub token (should be from GitHub App for signed commits)'
        required: true
runs:
    using: composite
    steps:
        - name: Configure git for GitHub App
          shell: bash
          run: |
              # Configure git to use the GitHub App token
              git config --global user.name "azle-bot[bot]"
              git config --global user.email "azle-bot[bot]@users.noreply.github.com"

        - name: Test GitHub App API permissions
          shell: bash
          env:
              GITHUB_TOKEN: ${{ inputs.token }}
          run: |
              echo "Testing GitHub App API access..."
              REPO_OWNER="${{ github.repository_owner }}"
              REPO_NAME="${{ github.event.repository.name }}"

              # Test basic repo access
              echo "Testing basic repo access..."
              if gh api repos/$REPO_OWNER/$REPO_NAME --jq '.name'; then
                echo "✅ Basic repo access works"
              else
                echo "❌ Basic repo access failed"
                exit 1
              fi

              # Test contents permission
              echo "Testing contents permission..."
              if gh api repos/$REPO_OWNER/$REPO_NAME/contents/README.md --jq '.name' 2>/dev/null; then
                echo "✅ Contents read access works"
              else
                echo "❌ Contents read access failed"
              fi

              # Test git refs access
              echo "Testing git refs read access..."
              if gh api repos/$REPO_OWNER/$REPO_NAME/git/refs/heads/${{ github.ref_name }} --jq '.ref' 2>/dev/null; then
                echo "✅ Git refs read access works"
              else
                echo "❌ Git refs read access failed"
              fi

              # Show what permissions the token actually has
              echo "Checking token permissions..."
              gh api user --include-headers 2>&1 | grep -i 'x-oauth-scopes\|x-accepted-oauth-scopes' || echo "No OAuth scope headers found (this is normal for GitHub Apps)"

        - name: Commit and push changes using GitHub Commits API
          shell: bash
          env:
              GITHUB_TOKEN: ${{ inputs.token }}
          run: |
              # Get repository information
              REPO_OWNER="${{ github.repository_owner }}"
              REPO_NAME="${{ github.event.repository.name }}"
              BASE_BRANCH="${{ github.ref_name }}"
              TARGET_BRANCH="${{ inputs.branch-name }}"

              echo "Base branch: $BASE_BRANCH"
              echo "Target branch: $TARGET_BRANCH"

              # Check if there are any changes to commit
              echo "Adding files: ${{ inputs.add-files }}"
              git add "${{ inputs.add-files }}"

              if git diff --cached --quiet; then
                echo "No changes to commit. Skipping commit and push."
                exit 0
              fi

              echo "Changes detected, proceeding with GitHub Commits API..."

              # Create branch if needed using git (since this worked before)
              if [[ "${{ inputs.create-branch }}" == "true" ]]; then
                echo "Creating new branch: $TARGET_BRANCH"
                git fetch origin
                git switch -c "$TARGET_BRANCH" "origin/$BASE_BRANCH" 2>/dev/null || git switch "$TARGET_BRANCH"
                git push origin "$TARGET_BRANCH" || echo "Branch may already exist"
              else
                echo "Using existing branch: $TARGET_BRANCH"
                git fetch origin
                git switch "$TARGET_BRANCH"
              fi

              # Get list of changed files
              CHANGED_FILES=$(git diff --cached --name-only)

              if [ -z "$CHANGED_FILES" ]; then
                echo "No files to commit"
                exit 0
              fi

              # Try using the higher-level Contents API to update files
              echo "Using GitHub Contents API to update files..."

              for file in $CHANGED_FILES; do
                if [ -f "$file" ]; then
                  echo "Updating file: $file"

                  # Get current file SHA if it exists
                  CURRENT_SHA=""
                  if FILE_INFO=$(gh api "repos/$REPO_OWNER/$REPO_NAME/contents/$file" --jq '.sha' 2>/dev/null); then
                    CURRENT_SHA="$FILE_INFO"
                    echo "Current SHA for $file: $CURRENT_SHA"
                  else
                    echo "File $file doesn't exist yet, creating new file"
                  fi

                  # Create file content
                  FILE_CONTENT=$(base64 -w 0 "$file")

                  # Update/create file using Contents API
                  PAYLOAD=$(jq -n \
                    --arg message "${{ inputs.commit-message }}" \
                    --arg content "$FILE_CONTENT" \
                    --arg branch "$TARGET_BRANCH" \
                    $([ -n "$CURRENT_SHA" ] && echo "--arg sha \"$CURRENT_SHA\"") \
                    '{
                      message: $message,
                      content: $content,
                      branch: $branch
                    } + (if $sha then {sha: $sha} else {} end)')

                  echo "Updating $file via Contents API..."
                  if echo "$PAYLOAD" | gh api "repos/$REPO_OWNER/$REPO_NAME/contents/$file" \
                    --method PUT \
                    --input - \
                    --jq '.commit.sha'; then
                    echo "✅ Successfully updated $file"
                  else
                    echo "❌ Failed to update $file"
                    exit 1
                  fi
                fi
              done

              echo "Successfully committed all changes to $TARGET_BRANCH using GitHub API"
