name: Commit and Push Changes
description: 'Configures git, commits changes, and pushes to a new branch'
inputs:
    branch-name:
        description: 'Name of the branch to push to'
        required: true
    create-branch:
        description: 'Whether to create the branch specified by branch-name'
        required: false
        default: 'false'
    commit-message:
        description: 'Commit message'
        required: true
    add-files:
        description: 'Optional file pattern to limit git add. E.g. "src/" to only add changes from the src directory. Defaults to "--all" to add all changes.'
        required: false
        default: '--all'
    token:
        description: 'GitHub token for authentication'
        required: false
        default: ''
runs:
    using: composite
    steps:
        - name: Commit and push changes
          shell: bash
          env:
              GH_TOKEN: ${{ inputs.token || github.token }}
          run: |
              # Create new branch if requested
              if [[ "${{ inputs.create-branch }}" == "true" ]]; then
                  git switch -c "${{ inputs.branch-name }}"
                  git push origin "${{ inputs.branch-name }}"
              else
                  git switch "${{ inputs.branch-name }}"
              fi

              # Show status of working directory
              echo "Current git status:"
              git status

              # Add and stage changes if there are any
              echo "Adding files: ${{ inputs.add-files }}"
              git add "${{ inputs.add-files }}"

              if ! git diff --cached --quiet; then
                  echo "Creating verified commit using GitHub API..."

                  # Get the current branch SHA
                  CURRENT_SHA=$(git rev-parse HEAD)
                  echo "Current SHA: $CURRENT_SHA"

                  # Get the tree SHA for the staged changes
                  TREE_SHA=$(git write-tree)
                  echo "Tree SHA: $TREE_SHA"

                  # Create commit using GitHub API (this will be automatically verified)
                  COMMIT_RESPONSE=$(gh api \
                    --method POST \
                    repos/:owner/:repo/git/commits \
                    -f message="${{ inputs.commit-message }}" \
                    -f tree="$TREE_SHA" \
                    -f parents[]="$CURRENT_SHA")

                  # Extract the new commit SHA
                  NEW_COMMIT_SHA=$(echo "$COMMIT_RESPONSE" | jq -r '.sha')
                  echo "New commit SHA: $NEW_COMMIT_SHA"

                  # Update the branch reference to point to the new commit
                  gh api \
                    --method PATCH \
                    repos/:owner/:repo/git/refs/heads/${{ inputs.branch-name }} \
                    -f sha="$NEW_COMMIT_SHA"

                  echo "Successfully created verified commit using GitHub API"
              else
                  echo "No changes to commit. Skipping commit and push."
              fi
