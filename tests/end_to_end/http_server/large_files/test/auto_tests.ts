import { describe } from '@jest/globals';
import { please, Test } from 'azle/test';
import { join } from 'path';

import { Unit } from '../../../../../scripts/file_generator';
import { generateTestFileOfSize } from './generate_test_files';
import { getAutoGeneratedFileName, verifyUpload } from './tests';

const autoGenAutoUploadSmallFileInfos: [number, Unit][] = [
    // Edge Cases
    [0, 'B'],
    [1, 'B'],

    // General Cases
    [1, 'KiB'],
    [10, 'KiB'],
    [100, 'KiB']
];

const autoGenAutoUploadFileInfos: [number, Unit][] =
    process.env.AZLE_IS_FEATURE_BRANCH_PR === 'true' ||
    process.env.AZLE_IS_FEATURE_BRANCH_DRAFT_PR === 'true'
        ? autoGenAutoUploadSmallFileInfos
        : [
              ...autoGenAutoUploadSmallFileInfos,
              // General Cases
              [1, 'MiB'],
              [10, 'MiB'],
              [100, 'MiB'],
              [250, 'MiB'],
              [1, 'GiB'],
              // Edge Cases
              [2_000_000 + 1, 'B'], // One more byte that the message chunk size
              [120 * 1024 * 1024 + 1, 'B'] // One more byte than can be processed in a single hash_file_by_parts call
          ];

const permanentFiles: string[] = [
    'photos/people/george-washington.tif',
    'photos/places/dinosaurNM.jpg',
    'photos/places/slc.jpg',
    'photos/things/book.jpg',
    'photos/things/utah-teapot.jpg',
    'text/subfolder/deep-sub-folder/deep.txt',
    'text/subfolder/sibling-deep-sub-folder/deep.txt',
    'text/subfolder/other-thing.txt',
    'text/thing.txt',
    'text/thing.txt'
];

const renamedPermanentFiles: [string, string][] = [
    ['text/single.txt', 'single_asset.txt']
];

export function generateFiles(): Test {
    return () => {
        describe.each(autoGenAutoUploadFileInfos)(
            'prepare auto generated files locally for upload',
            (size, units) => {
                please(
                    `generate file: ${getAutoGeneratedFileName(size, units)}`,
                    async () => {
                        await generateTestFileOfSize(size, units);
                    },
                    10 * 60 * 1_000
                );
            }
        );
    };
}

/**
 * This suite of tests verifies the integrity and consistency of files that are
 * automatically uploaded to the canister as specified in the `dfx.json`
 * configuration.
 *
 * @param origin - The origin URL or path used in the tests.
 * @returns A suite of Jest tests.
 */
export function getDfxConfigFileTests(origin: string): Test {
    return () => {
        describe.each(permanentFiles)(
            'permanent files with same names locally as on canister that were uploaded as canister was deployed',
            (canisterPath) => {
                verifyUpload(
                    origin,
                    join('permanent', canisterPath),
                    canisterPath
                );
            }
        );

        describe.each(renamedPermanentFiles)(
            'permanent files with different names locally than on canister that were uploaded as canister was deployed',
            (canisterPath, localPath) => {
                verifyUpload(origin, localPath, canisterPath);
            }
        );

        describe.each(autoGenAutoUploadFileInfos)(
            'auto generated files that were uploaded as canister was deployed',
            (size, units) => {
                const fileName = getAutoGeneratedFileName(size, units);
                verifyUpload(origin, join('auto', fileName), fileName);
            }
        );
    };
}
