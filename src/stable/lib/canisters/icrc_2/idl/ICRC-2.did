// Taken from: https://github.com/dfinity/ICRC-1/blob/effeeaa89d8dd75ce3b2215b9c36eed98dafb7a8/standards/ICRC-2/ICRC-2.did

type Account = record {
    owner : principal;
    subaccount : opt blob;
};

type ApproveArgs = record {
    from_subaccount : opt blob;
    spender : Account;
    amount : nat;
    expected_allowance : opt nat;
    expires_at : opt nat64;
    fee : opt nat;
    memo : opt blob;
    created_at_time : opt nat64;
};

// TODO added by Demergent Labs, would be nice to upstream or automate
type ApproveResult = variant { Ok : nat; Err : ApproveError };

type ApproveError = variant {
    BadFee : record { expected_fee : nat };
    InsufficientFunds : record { balance : nat };
    AllowanceChanged : record { current_allowance : nat };
    Expired : record { ledger_time : nat64 };
    TooOld;
    CreatedInFuture: record { ledger_time : nat64 };
    Duplicate : record { duplicate_of : nat };
    TemporarilyUnavailable;
    GenericError : record { error_code : nat; message : text };
};

type TransferFromArgs = record {
    spender_subaccount : opt blob;
    from : Account;
    to : Account;
    amount : nat;
    fee : opt nat;
    memo : opt blob;
    created_at_time : opt nat64;
};

// TODO added by Demergent Labs, would be nice to upstream or automate
type TransferFromResult = variant { Ok : nat; Err : TransferFromError };

type TransferFromError = variant {
    BadFee : record { expected_fee : nat };
    BadBurn : record { min_burn_amount : nat };
    InsufficientFunds : record { balance : nat };
    InsufficientAllowance : record { allowance : nat };
    TooOld;
    CreatedInFuture: record { ledger_time : nat64 };
    Duplicate : record { duplicate_of : nat };
    TemporarilyUnavailable;
    GenericError : record { error_code : nat; message : text };
};

type AllowanceArgs = record {
    account : Account;
    spender : Account;
};

// TODO added by Demergent Labs, would be nice to upstream or automate
type AllowanceResult = record { allowance : nat; expires_at : opt nat64 };

// TODO added by Demergent Labs, would be nice to upstream or automate
type SupportedStandard = record { name : text; url : text };

service : {
    icrc1_supported_standards : () -> (vec SupportedStandard) query;

    icrc2_approve : (ApproveArgs) -> (ApproveResult);
    icrc2_transfer_from : (TransferFromArgs) -> (TransferFromResult);
    icrc2_allowance : (AllowanceArgs) -> (AllowanceResult) query;
}
