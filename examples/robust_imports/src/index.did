type IceAppleBasket = record {
  "int" : int;
  starInt : int;
  "int8" : int8;
  "int16" : int16;
  "int32" : int32;
  "int64" : int64;
};
type MyCavernousRecord = record {
  myRecord : MyRecord;
  myDeepTuple : record { text };
  myCavernousTuple : record { text };
  fathomlessRecord : MyFathomlessRecord;
  coveredRecord : MyCoveredRecord;
  myTuple : record { text };
};
type MyCavernousVariant = variant { sixteen; eight };
type MyCoveredRecord = record {
  type_name : text;
  name : text;
  count : int8;
  greeting : opt text;
};
type MyDeepVariant = variant { Thing : int8 };
type MyFathomlessRecord = record { mytext : text };
type MyFathomlessVariant = variant { MyInt16 : int16; MyInt8 : int8 };
type MyRecord = record {
  int1 : int16;
  int2 : int16;
  int3 : int16;
  int4 : int8;
  int5 : int8;
  int6 : int8;
  int7 : int8;
  "int8" : int8;
  int9 : int16;
};
type MyVariant = variant { String : text; Thing : int8 };
type NectarineBasket = record {
  "nat" : nat;
  starNat : nat;
  "nat8" : nat8;
  "nat16" : nat16;
  "nat32" : nat32;
  "nat64" : nat64;
};
type Watermelon = variant { Seeds; Seedless };
service : () -> {
  addSigFigs : (float32) -> (float64) query;
  azleAliasQuery : () -> (text) query;
  checkService : (
      service { deliver : () -> (text); is_delivered : () -> (bool) query },
    ) -> (
      service { deliver : () -> (text); is_delivered : () -> (bool) query },
    ) query;
  checkWatermelonForSeeds : (bool, Watermelon) -> () query;
  compareApplesToOranges : (IceAppleBasket, NectarineBasket) -> (bool) query;
  deepAliasQuery : () -> (text) query;
  deepAliasZero : () -> (int) query;
  dirtyIlama : () -> ();
  getManagementPeach : () -> (principal) query;
  handleFarkleberries : (
      func (text) -> () oneway,
      func (text) -> (text) query,
      func (text) -> (text),
    ) -> (
      record {
        func (text) -> (text);
        func (text) -> () oneway;
        func (text) -> (text) query;
      },
    ) query;
  isFruitPrepared : () -> (bool) query;
  isMangoTrickyToEat : () -> (bool) query;
  makeCavernousRecord : () -> (MyCavernousRecord) query;
  mixedAliasQuery : () -> (text) query;
  mixedAliasZero : () -> (int) query;
  myFathomlessVariantToMyCavernousVariant : (MyFathomlessVariant) -> (
      MyCavernousVariant,
    ) query;
  myVariantToMyDeepVariant : (MyVariant) -> (MyDeepVariant) query;
  peelBanana : (vec nat8) -> (nat8) query;
  pickElderberry : () -> (empty);
  pitOlives : (opt bool) -> (bool) query;
  putTheCoconutInTheLime : (int16) -> (vec int16) query;
  removeRambutanSkins : () -> (reserved);
  returnFathomlessService : (
      service { query1 : () -> (bool) query; update1 : () -> (text) },
    ) -> (
      service { query1 : () -> (bool) query; update1 : () -> (text) },
    ) query;
  returnFathomlessVec : () -> (vec int16) query;
  returnVec : () -> (vec vec nat8) query;
  returnWeird : () -> (int64) query;
  simpleAliasQuery : () -> (text) query;
  typeCheck : (vec opt nat16) -> (int16) query;
}