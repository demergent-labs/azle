type Archive = record { canister_id : principal };
type Archives = record { archives : vec Archive };
type AzleInline_11804335565527792297 = record {
  to : vec nat8;
  fee : Tokens;
  from : vec nat8;
  amount : Tokens;
};
type AzleInline_12373753716509696688 = record {
  from : vec nat8;
  amount : Tokens;
};
type AzleInline_12973964044620876968 = record { expected_fee : Tokens };
type AzleInline_13125641921022478626 = record { allowed_window_nanos : nat64 };
type AzleInline_14801010896561872351 = record {
  requested_index : nat64;
  first_valid_index : nat64;
};
type AzleInline_16382696833118207597 = record { balance : Tokens };
type AzleInline_2802593598360289448 = record { duplicate_of : nat64 };
type AzleInline_3751257598229003272 = record { to : vec nat8; amount : Tokens };
type AzleInline_437713155240343969 = record {
  callback : func (GetBlocksArgs) -> (
      variant { Ok : BlockRange; Err : QueryArchiveError },
    ) query;
  start : nat64;
  length : nat64;
};
type AzleInline_8417565921261363731 = record {
  error_message : text;
  error_code : nat64;
};
type Block = record {
  transaction : Transaction;
  timestamp : TimeStamp;
  parent_hash : opt vec nat8;
};
type BlockRange = record { blocks : vec Block };
type ExecuteTransferResult = variant { ok : TransferResult; err : text };
type GetAccountBalanceResult = variant { ok : Tokens; err : text };
type GetArchivesResult = variant { ok : Archives; err : text };
type GetBlocksArgs = record { start : nat64; length : nat64 };
type GetBlocksResult = variant { ok : QueryBlocksResponse; err : text };
type GetDecimalsResult = variant { ok : nat32; err : text };
type GetNameResult = variant { ok : text; err : text };
type GetTransferFeeResult = variant { ok : TransferFee; err : text };
type Operation = variant {
  Burn : AzleInline_12373753716509696688;
  Mint : AzleInline_3751257598229003272;
  Transfer : AzleInline_11804335565527792297;
};
type QueryArchiveError = variant {
  BadFirstBlockIndex : AzleInline_14801010896561872351;
  Other : AzleInline_8417565921261363731;
};
type QueryBlocksResponse = record {
  certificate : opt vec nat8;
  blocks : vec Block;
  chain_length : nat64;
  first_block_index : nat64;
  archived_blocks : vec AzleInline_437713155240343969;
};
type TimeStamp = record { timestamp_nanos : nat64 };
type Tokens = record { e8s : nat64 };
type Transaction = record {
  memo : nat64;
  operation : opt Operation;
  created_at_time : TimeStamp;
};
type TransferError = variant {
  TxTooOld : AzleInline_13125641921022478626;
  BadFee : AzleInline_12973964044620876968;
  TxDuplicate : AzleInline_2802593598360289448;
  TxCreatedInFuture;
  InsufficientFunds : AzleInline_16382696833118207597;
};
type TransferFee = record { transfer_fee : Tokens };
type TransferResult = variant { Ok : nat64; Err : TransferError };
service : () -> {
  execute_transfer : (text, nat64, nat64, opt nat64) -> (ExecuteTransferResult);
  get_account_balance : (text) -> (GetAccountBalanceResult);
  get_address_from_principal : (principal) -> (text) query;
  get_archives : () -> (GetArchivesResult);
  get_blocks : (GetBlocksArgs) -> (GetBlocksResult);
  get_decimals : () -> (GetDecimalsResult);
  get_name : () -> (GetNameResult);
  get_symbol : () -> (GetNameResult);
  get_transfer_fee : () -> (GetTransferFeeResult);
}