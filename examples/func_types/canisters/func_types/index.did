type rec_26 = func (record {id:text; complexFunc:rec_26; basicFunc:func (text) -> (text) query}, variant {Bad; ComplexFunc:rec_26; Good; BasicFunc:func (text) -> (text) query}) -> (nat64) ;
type rec_29 = func (record {id:text; complexFunc:rec_29; basicFunc:func (text) -> (text) query}, variant {Bad; ComplexFunc:rec_29; Good; BasicFunc:func (text) -> (text) query}) -> (nat64) ;
type rec_34 = func (record {id:text; complexFunc:rec_34; basicFunc:func (text) -> (text) query}, variant {Bad; ComplexFunc:rec_34; Good; BasicFunc:func (text) -> (text) query}) -> (nat64) ;
service: () -> {
	basicFuncParam: (func (text) -> (text) query) -> (func (text) -> (text) query) query;
	basicFuncParamArray: (vec func (text) -> (text) query) -> (vec func (text) -> (text) query) query;
	basicFuncReturnType: () -> (func (text) -> (text) query) query;
	basicFuncReturnTypeArray: () -> (vec func (text) -> (text) query) query;
	complexFuncParam: (rec_26) -> (rec_29) query;
	complexFuncReturnType: () -> (rec_34) query;
	getNotifierFromNotifiersCanister: () -> (func (vec nat8) -> () oneway) ;
	getStableFunc: () -> (func (nat64, text) -> () query) query;
	init: () -> () query;
	nullFuncParam: (func (opt null, vec null, null, vec vec null, vec opt null) -> (null) query) -> (func (opt null, vec null, null, vec vec null, vec opt null) -> (null) query) query;
}