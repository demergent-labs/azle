import { describe } from '@jest/globals';
import { Unit } from 'azle/scripts/file_generator';
import { please, Test } from 'azle/test';
import { execSync } from 'child_process';
import { join } from 'path';

import { generateTestFileOfSize } from './generate_test_files';
import { getAutoGeneratedFileName, verifyUpload } from './tests';

const hugeAutoGenAutoUploadSmallFileInfos: [number, Unit][] = [[0, 'GiB']]; // The tests will fail if this array is empty, so for AZLE_IS_FEATURE_BRANCH_PR && AZLE_IS_FEATURE_BRANCH_DRAFT_PR we will have a dummy entry

const hugeAutoGenAutoUploadFileInfos: [number, Unit][] =
    process.env.AZLE_IS_FEATURE_BRANCH_PR === 'true' ||
    process.env.AZLE_IS_FEATURE_BRANCH_DRAFT_PR === 'true'
        ? hugeAutoGenAutoUploadSmallFileInfos
        : [...hugeAutoGenAutoUploadSmallFileInfos, [2, 'GiB']]; // TODO add tests for 5GiB and maybe larger https://github.com/demergent-labs/azle/issues/2065

export function hugeFilesTests(origin: string): Test {
    return () => {
        describe.each(hugeAutoGenAutoUploadFileInfos)(
            'generate huge files',
            (size, units) => {
                const fileName = getAutoGeneratedFileName(size, units);
                please(`generate huge file: ${fileName}`, async () => {
                    await generateTestFileOfSize(size, units);
                });
            }
        );

        please('redeploy the canister to reupload', async () => {
            execSync(`dfx deploy --upgrade-unchanged`, {
                stdio: 'inherit'
            });
        });

        describe.each(hugeAutoGenAutoUploadFileInfos)(
            'verify huge files were uploaded correctly',
            (size, units) => {
                const fileName = getAutoGeneratedFileName(size, units);
                verifyUpload(origin, join('auto', fileName), fileName);
            }
        );
    };
}
