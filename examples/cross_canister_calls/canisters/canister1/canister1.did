type Account = record { id : text; balance : nat64 };
type AccountArgs = record { id : text };
type AccountResult = variant { ok : opt Account; err : text };
type AccountsResult = variant { ok : vec Account; err : text };
type BalanceResult = variant { ok : nat64; err : text };
type NotifyResult = variant { ok; err : text };
type TrapResult = variant { ok : text; err : text };
service : () -> {
  account : (AccountArgs) -> (AccountResult);
  accounts : () -> (AccountsResult);
  balance : (text) -> (BalanceResult);
  send_notification : () -> (NotifyResult);
  transfer : (text, text, nat64) -> (BalanceResult);
  trap : () -> (TrapResult);
}