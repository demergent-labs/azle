type Child = record { id : text };
type User = record { id : text; children : vec Child };
service : () -> {
  readStableBlob : () -> (vec nat8) query;
  readStableBlobs : () -> (vec vec nat8) query;
  readStableFloat32 : () -> (float32) query;
  readStableFloat64 : () -> (float64) query;
  readStableInt : () -> (int) query;
  readStableInt16 : () -> (int16) query;
  readStableInt32 : () -> (int32) query;
  readStableInt64 : () -> (int64) query;
  readStableInt8 : () -> (int8) query;
  readStableInts : () -> (vec int) query;
  readStableNat : () -> (nat) query;
  readStableNat16 : () -> (nat16) query;
  readStableNat32 : () -> (nat32) query;
  readStableNat64 : () -> (nat64) query;
  readStableNat8 : () -> (nat8) query;
  readStablePrincipal : () -> (principal) query;
  readStableString : () -> (text) query;
  readStableUser : () -> (User) query;
  writeStableBlob : (vec nat8) -> ();
  writeStableBlobs : (vec vec nat8) -> ();
  writeStableFloat32 : (float32) -> ();
  writeStableFloat64 : (float64) -> ();
  writeStableInt : (int) -> ();
  writeStableInt16 : (int16) -> ();
  writeStableInt32 : (int32) -> ();
  writeStableInt64 : (int64) -> ();
  writeStableInt8 : (int8) -> ();
  writeStableInts : (vec int) -> ();
  writeStableNat : (nat) -> ();
  writeStableNat16 : (nat16) -> ();
  writeStableNat32 : (nat32) -> ();
  writeStableNat64 : (nat64) -> ();
  writeStableNat8 : (nat8) -> ();
  writeStablePrincipal : (principal) -> ();
  writeStableString : (text) -> ();
  writeStableUser : (User) -> ();
}