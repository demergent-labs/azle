type ComplexThreeTuple = record {
  record { text; nat64 };
  record { id : text; primitive_two_tuple : record { text; nat64 } };
  variant { Bad : ComplexThreeTuple; Good };
};
type HttpResponse = record { headers : vec record { text; text } };
type Reaction = variant { Bad : ComplexThreeTuple; Good };
type StreamingCallbackType = variant {
  without_headers;
  with_headers : vec record { text; text };
};
type User = record { id : text; primitive_two_tuple : record { text; nat64 } };
service : () -> {
  complex_three_tuple_param : (
      record { record { text; nat64 }; User; Reaction },
    ) -> (record { record { text; nat64 }; User; Reaction }) query;
  complex_three_tuple_return_type : () -> (
      record { record { text; nat64 }; User; Reaction },
    ) query;
  complex_two_tuple_param : (record { record { text; nat64 }; User }) -> (
      record { record { text; nat64 }; User },
    ) query;
  complex_two_tuple_return_type : () -> (
      record { record { text; nat64 }; User },
    ) query;
  primitive_three_tuple_param : (record { text; nat64; principal }) -> (
      record { text; nat64; principal },
    ) query;
  primitive_three_tuple_return_type : () -> (
      record { text; nat64; principal },
    ) query;
  primitive_two_tuple_param : (record { text; nat64 }) -> (
      record { text; nat64 },
    ) query;
  primitive_two_tuple_return_type : () -> (record { text; nat64 }) query;
  tuple_array_params_and_return_type : (vec record { text; text }) -> (
      vec record { text; text },
    ) query;
  tuple_array_record_field : () -> (HttpResponse) query;
  tuple_array_variant_field : () -> (StreamingCallbackType) query;
}